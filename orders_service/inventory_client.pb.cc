// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory_client.proto

#include "inventory_client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace inventory {
PROTOBUF_CONSTEXPR BookRequest::BookRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.book_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BookRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookRequestDefaultTypeInternal() {}
  union {
    BookRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookRequestDefaultTypeInternal _BookRequest_default_instance_;
PROTOBUF_CONSTEXPR BookResponse::BookResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.book_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isbn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_.stock_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BookResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookResponseDefaultTypeInternal() {}
  union {
    BookResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookResponseDefaultTypeInternal _BookResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateStockRequest::UpdateStockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.book_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quantity_change_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateStockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateStockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateStockRequestDefaultTypeInternal() {}
  union {
    UpdateStockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateStockRequestDefaultTypeInternal _UpdateStockRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateStockResponse::UpdateStockResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.new_stock_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateStockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateStockResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateStockResponseDefaultTypeInternal() {}
  union {
    UpdateStockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateStockResponseDefaultTypeInternal _UpdateStockResponse_default_instance_;
}  // namespace inventory
static ::_pb::Metadata file_level_metadata_inventory_5fclient_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_inventory_5fclient_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_inventory_5fclient_2eproto = nullptr;

const uint32_t TableStruct_inventory_5fclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inventory::BookRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inventory::BookRequest, _impl_.book_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inventory::BookResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inventory::BookResponse, _impl_.book_id_),
  PROTOBUF_FIELD_OFFSET(::inventory::BookResponse, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::inventory::BookResponse, _impl_.author_),
  PROTOBUF_FIELD_OFFSET(::inventory::BookResponse, _impl_.isbn_),
  PROTOBUF_FIELD_OFFSET(::inventory::BookResponse, _impl_.stock_),
  PROTOBUF_FIELD_OFFSET(::inventory::BookResponse, _impl_.price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inventory::UpdateStockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inventory::UpdateStockRequest, _impl_.book_id_),
  PROTOBUF_FIELD_OFFSET(::inventory::UpdateStockRequest, _impl_.quantity_change_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::inventory::UpdateStockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::inventory::UpdateStockResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::inventory::UpdateStockResponse, _impl_.new_stock_),
  PROTOBUF_FIELD_OFFSET(::inventory::UpdateStockResponse, _impl_.message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::inventory::BookRequest)},
  { 7, -1, -1, sizeof(::inventory::BookResponse)},
  { 19, -1, -1, sizeof(::inventory::UpdateStockRequest)},
  { 27, -1, -1, sizeof(::inventory::UpdateStockResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::inventory::_BookRequest_default_instance_._instance,
  &::inventory::_BookResponse_default_instance_._instance,
  &::inventory::_UpdateStockRequest_default_instance_._instance,
  &::inventory::_UpdateStockResponse_default_instance_._instance,
};

const char descriptor_table_protodef_inventory_5fclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026inventory_client.proto\022\tinventory\"\036\n\013B"
  "ookRequest\022\017\n\007book_id\030\001 \001(\t\"j\n\014BookRespo"
  "nse\022\017\n\007book_id\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\016\n\006a"
  "uthor\030\003 \001(\t\022\014\n\004isbn\030\004 \001(\t\022\r\n\005stock\030\005 \001(\005"
  "\022\r\n\005price\030\006 \001(\001\">\n\022UpdateStockRequest\022\017\n"
  "\007book_id\030\001 \001(\t\022\027\n\017quantity_change\030\002 \001(\005\""
  "J\n\023UpdateStockResponse\022\017\n\007success\030\001 \001(\010\022"
  "\021\n\tnew_stock\030\002 \001(\005\022\017\n\007message\030\003 \001(\t2\240\001\n\020"
  "InventoryService\022<\n\007GetBook\022\026.inventory."
  "BookRequest\032\027.inventory.BookResponse\"\000\022N"
  "\n\013UpdateStock\022\035.inventory.UpdateStockReq"
  "uest\032\036.inventory.UpdateStockResponse\"\000b\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_inventory_5fclient_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_inventory_5fclient_2eproto = {
    false, false, 486, descriptor_table_protodef_inventory_5fclient_2eproto,
    "inventory_client.proto",
    &descriptor_table_inventory_5fclient_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_inventory_5fclient_2eproto::offsets,
    file_level_metadata_inventory_5fclient_2eproto, file_level_enum_descriptors_inventory_5fclient_2eproto,
    file_level_service_descriptors_inventory_5fclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_inventory_5fclient_2eproto_getter() {
  return &descriptor_table_inventory_5fclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_inventory_5fclient_2eproto(&descriptor_table_inventory_5fclient_2eproto);
namespace inventory {

// ===================================================================

class BookRequest::_Internal {
 public:
};

BookRequest::BookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:inventory.BookRequest)
}
BookRequest::BookRequest(const BookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BookRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.book_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.book_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.book_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_book_id().empty()) {
    _this->_impl_.book_id_.Set(from._internal_book_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:inventory.BookRequest)
}

inline void BookRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.book_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.book_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.book_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BookRequest::~BookRequest() {
  // @@protoc_insertion_point(destructor:inventory.BookRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.book_id_.Destroy();
}

void BookRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:inventory.BookRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.book_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string book_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_book_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inventory.BookRequest.book_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inventory.BookRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string book_id = 1;
  if (!this->_internal_book_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_book_id().data(), static_cast<int>(this->_internal_book_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inventory.BookRequest.book_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_book_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inventory.BookRequest)
  return target;
}

size_t BookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inventory.BookRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string book_id = 1;
  if (!this->_internal_book_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_book_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BookRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BookRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BookRequest::GetClassData() const { return &_class_data_; }


void BookRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BookRequest*>(&to_msg);
  auto& from = static_cast<const BookRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:inventory.BookRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_book_id().empty()) {
    _this->_internal_set_book_id(from._internal_book_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BookRequest::CopyFrom(const BookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inventory.BookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookRequest::IsInitialized() const {
  return true;
}

void BookRequest::InternalSwap(BookRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.book_id_, lhs_arena,
      &other->_impl_.book_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BookRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_5fclient_2eproto_getter, &descriptor_table_inventory_5fclient_2eproto_once,
      file_level_metadata_inventory_5fclient_2eproto[0]);
}

// ===================================================================

class BookResponse::_Internal {
 public:
};

BookResponse::BookResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:inventory.BookResponse)
}
BookResponse::BookResponse(const BookResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BookResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.book_id_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.author_){}
    , decltype(_impl_.isbn_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.stock_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.book_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.book_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_book_id().empty()) {
    _this->_impl_.book_id_.Set(from._internal_book_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.author_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_author().empty()) {
    _this->_impl_.author_.Set(from._internal_author(), 
      _this->GetArenaForAllocation());
  }
  _impl_.isbn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isbn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isbn().empty()) {
    _this->_impl_.isbn_.Set(from._internal_isbn(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stock_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.stock_));
  // @@protoc_insertion_point(copy_constructor:inventory.BookResponse)
}

inline void BookResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.book_id_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.author_){}
    , decltype(_impl_.isbn_){}
    , decltype(_impl_.price_){0}
    , decltype(_impl_.stock_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.book_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.book_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.author_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.isbn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isbn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BookResponse::~BookResponse() {
  // @@protoc_insertion_point(destructor:inventory.BookResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.book_id_.Destroy();
  _impl_.title_.Destroy();
  _impl_.author_.Destroy();
  _impl_.isbn_.Destroy();
}

void BookResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BookResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:inventory.BookResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.book_id_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.author_.ClearToEmpty();
  _impl_.isbn_.ClearToEmpty();
  ::memset(&_impl_.price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stock_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.stock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string book_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_book_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inventory.BookResponse.book_id"));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inventory.BookResponse.title"));
        } else
          goto handle_unusual;
        continue;
      // string author = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_author();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inventory.BookResponse.author"));
        } else
          goto handle_unusual;
        continue;
      // string isbn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_isbn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inventory.BookResponse.isbn"));
        } else
          goto handle_unusual;
        continue;
      // int32 stock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.stock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inventory.BookResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string book_id = 1;
  if (!this->_internal_book_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_book_id().data(), static_cast<int>(this->_internal_book_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inventory.BookResponse.book_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_book_id(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inventory.BookResponse.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string author = 3;
  if (!this->_internal_author().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inventory.BookResponse.author");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_author(), target);
  }

  // string isbn = 4;
  if (!this->_internal_isbn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isbn().data(), static_cast<int>(this->_internal_isbn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inventory.BookResponse.isbn");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_isbn(), target);
  }

  // int32 stock = 5;
  if (this->_internal_stock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_stock(), target);
  }

  // double price = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inventory.BookResponse)
  return target;
}

size_t BookResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inventory.BookResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string book_id = 1;
  if (!this->_internal_book_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_book_id());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string author = 3;
  if (!this->_internal_author().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());
  }

  // string isbn = 4;
  if (!this->_internal_isbn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isbn());
  }

  // double price = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 8;
  }

  // int32 stock = 5;
  if (this->_internal_stock() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stock());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BookResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BookResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BookResponse::GetClassData() const { return &_class_data_; }


void BookResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BookResponse*>(&to_msg);
  auto& from = static_cast<const BookResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:inventory.BookResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_book_id().empty()) {
    _this->_internal_set_book_id(from._internal_book_id());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_author().empty()) {
    _this->_internal_set_author(from._internal_author());
  }
  if (!from._internal_isbn().empty()) {
    _this->_internal_set_isbn(from._internal_isbn());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = from._internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_stock() != 0) {
    _this->_internal_set_stock(from._internal_stock());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BookResponse::CopyFrom(const BookResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inventory.BookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookResponse::IsInitialized() const {
  return true;
}

void BookResponse::InternalSwap(BookResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.book_id_, lhs_arena,
      &other->_impl_.book_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.author_, lhs_arena,
      &other->_impl_.author_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isbn_, lhs_arena,
      &other->_impl_.isbn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BookResponse, _impl_.stock_)
      + sizeof(BookResponse::_impl_.stock_)
      - PROTOBUF_FIELD_OFFSET(BookResponse, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BookResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_5fclient_2eproto_getter, &descriptor_table_inventory_5fclient_2eproto_once,
      file_level_metadata_inventory_5fclient_2eproto[1]);
}

// ===================================================================

class UpdateStockRequest::_Internal {
 public:
};

UpdateStockRequest::UpdateStockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:inventory.UpdateStockRequest)
}
UpdateStockRequest::UpdateStockRequest(const UpdateStockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateStockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.book_id_){}
    , decltype(_impl_.quantity_change_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.book_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.book_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_book_id().empty()) {
    _this->_impl_.book_id_.Set(from._internal_book_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.quantity_change_ = from._impl_.quantity_change_;
  // @@protoc_insertion_point(copy_constructor:inventory.UpdateStockRequest)
}

inline void UpdateStockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.book_id_){}
    , decltype(_impl_.quantity_change_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.book_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.book_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateStockRequest::~UpdateStockRequest() {
  // @@protoc_insertion_point(destructor:inventory.UpdateStockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateStockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.book_id_.Destroy();
}

void UpdateStockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateStockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:inventory.UpdateStockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.book_id_.ClearToEmpty();
  _impl_.quantity_change_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateStockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string book_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_book_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inventory.UpdateStockRequest.book_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 quantity_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.quantity_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateStockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inventory.UpdateStockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string book_id = 1;
  if (!this->_internal_book_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_book_id().data(), static_cast<int>(this->_internal_book_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inventory.UpdateStockRequest.book_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_book_id(), target);
  }

  // int32 quantity_change = 2;
  if (this->_internal_quantity_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_quantity_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inventory.UpdateStockRequest)
  return target;
}

size_t UpdateStockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inventory.UpdateStockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string book_id = 1;
  if (!this->_internal_book_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_book_id());
  }

  // int32 quantity_change = 2;
  if (this->_internal_quantity_change() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quantity_change());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateStockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateStockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateStockRequest::GetClassData() const { return &_class_data_; }


void UpdateStockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateStockRequest*>(&to_msg);
  auto& from = static_cast<const UpdateStockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:inventory.UpdateStockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_book_id().empty()) {
    _this->_internal_set_book_id(from._internal_book_id());
  }
  if (from._internal_quantity_change() != 0) {
    _this->_internal_set_quantity_change(from._internal_quantity_change());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateStockRequest::CopyFrom(const UpdateStockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inventory.UpdateStockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStockRequest::IsInitialized() const {
  return true;
}

void UpdateStockRequest::InternalSwap(UpdateStockRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.book_id_, lhs_arena,
      &other->_impl_.book_id_, rhs_arena
  );
  swap(_impl_.quantity_change_, other->_impl_.quantity_change_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateStockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_5fclient_2eproto_getter, &descriptor_table_inventory_5fclient_2eproto_once,
      file_level_metadata_inventory_5fclient_2eproto[2]);
}

// ===================================================================

class UpdateStockResponse::_Internal {
 public:
};

UpdateStockResponse::UpdateStockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:inventory.UpdateStockResponse)
}
UpdateStockResponse::UpdateStockResponse(const UpdateStockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateStockResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.new_stock_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_stock_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.new_stock_));
  // @@protoc_insertion_point(copy_constructor:inventory.UpdateStockResponse)
}

inline void UpdateStockResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.new_stock_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateStockResponse::~UpdateStockResponse() {
  // @@protoc_insertion_point(destructor:inventory.UpdateStockResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateStockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void UpdateStockResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateStockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:inventory.UpdateStockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.new_stock_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.new_stock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateStockResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 new_stock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.new_stock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "inventory.UpdateStockResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateStockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:inventory.UpdateStockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 new_stock = 2;
  if (this->_internal_new_stock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_new_stock(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "inventory.UpdateStockResponse.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:inventory.UpdateStockResponse)
  return target;
}

size_t UpdateStockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inventory.UpdateStockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 new_stock = 2;
  if (this->_internal_new_stock() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_stock());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateStockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateStockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateStockResponse::GetClassData() const { return &_class_data_; }


void UpdateStockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateStockResponse*>(&to_msg);
  auto& from = static_cast<const UpdateStockResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:inventory.UpdateStockResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_new_stock() != 0) {
    _this->_internal_set_new_stock(from._internal_new_stock());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateStockResponse::CopyFrom(const UpdateStockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inventory.UpdateStockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStockResponse::IsInitialized() const {
  return true;
}

void UpdateStockResponse::InternalSwap(UpdateStockResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateStockResponse, _impl_.new_stock_)
      + sizeof(UpdateStockResponse::_impl_.new_stock_)
      - PROTOBUF_FIELD_OFFSET(UpdateStockResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateStockResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_inventory_5fclient_2eproto_getter, &descriptor_table_inventory_5fclient_2eproto_once,
      file_level_metadata_inventory_5fclient_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace inventory
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::inventory::BookRequest*
Arena::CreateMaybeMessage< ::inventory::BookRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inventory::BookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::inventory::BookResponse*
Arena::CreateMaybeMessage< ::inventory::BookResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inventory::BookResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::inventory::UpdateStockRequest*
Arena::CreateMaybeMessage< ::inventory::UpdateStockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inventory::UpdateStockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::inventory::UpdateStockResponse*
Arena::CreateMaybeMessage< ::inventory::UpdateStockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::inventory::UpdateStockResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
