// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: orders_service.proto

#include "orders_service.pb.h"
#include "orders_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace orders {

static const char* OrdersService_method_names[] = {
  "/orders.OrdersService/CreateOrder",
  "/orders.OrdersService/GetOrder",
  "/orders.OrdersService/ListOrdersByUser",
};

std::unique_ptr< OrdersService::Stub> OrdersService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrdersService::Stub> stub(new OrdersService::Stub(channel, options));
  return stub;
}

OrdersService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateOrder_(OrdersService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrder_(OrdersService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOrdersByUser_(OrdersService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OrdersService::Stub::CreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::orders::OrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::orders::CreateOrderRequest, ::orders::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateOrder_, context, request, response);
}

void OrdersService::Stub::async::CreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest* request, ::orders::OrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::orders::CreateOrderRequest, ::orders::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateOrder_, context, request, response, std::move(f));
}

void OrdersService::Stub::async::CreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest* request, ::orders::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>* OrdersService::Stub::PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::orders::OrderResponse, ::orders::CreateOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>* OrdersService::Stub::AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrdersService::Stub::GetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::orders::OrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::orders::GetOrderRequest, ::orders::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOrder_, context, request, response);
}

void OrdersService::Stub::async::GetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest* request, ::orders::OrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::orders::GetOrderRequest, ::orders::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrder_, context, request, response, std::move(f));
}

void OrdersService::Stub::async::GetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest* request, ::orders::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>* OrdersService::Stub::PrepareAsyncGetOrderRaw(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::orders::OrderResponse, ::orders::GetOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>* OrdersService::Stub::AsyncGetOrderRaw(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrdersService::Stub::ListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::orders::ListOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::orders::ListOrdersRequest, ::orders::ListOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListOrdersByUser_, context, request, response);
}

void OrdersService::Stub::async::ListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest* request, ::orders::ListOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::orders::ListOrdersRequest, ::orders::ListOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListOrdersByUser_, context, request, response, std::move(f));
}

void OrdersService::Stub::async::ListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest* request, ::orders::ListOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListOrdersByUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::orders::ListOrdersResponse>* OrdersService::Stub::PrepareAsyncListOrdersByUserRaw(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::orders::ListOrdersResponse, ::orders::ListOrdersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListOrdersByUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::orders::ListOrdersResponse>* OrdersService::Stub::AsyncListOrdersByUserRaw(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListOrdersByUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

OrdersService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrdersService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrdersService::Service, ::orders::CreateOrderRequest, ::orders::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrdersService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::orders::CreateOrderRequest* req,
             ::orders::OrderResponse* resp) {
               return service->CreateOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrdersService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrdersService::Service, ::orders::GetOrderRequest, ::orders::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrdersService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::orders::GetOrderRequest* req,
             ::orders::OrderResponse* resp) {
               return service->GetOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrdersService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrdersService::Service, ::orders::ListOrdersRequest, ::orders::ListOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrdersService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::orders::ListOrdersRequest* req,
             ::orders::ListOrdersResponse* resp) {
               return service->ListOrdersByUser(ctx, req, resp);
             }, this)));
}

OrdersService::Service::~Service() {
}

::grpc::Status OrdersService::Service::CreateOrder(::grpc::ServerContext* context, const ::orders::CreateOrderRequest* request, ::orders::OrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrdersService::Service::GetOrder(::grpc::ServerContext* context, const ::orders::GetOrderRequest* request, ::orders::OrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrdersService::Service::ListOrdersByUser(::grpc::ServerContext* context, const ::orders::ListOrdersRequest* request, ::orders::ListOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace orders

