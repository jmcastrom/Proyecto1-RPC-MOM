// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: inventory_client.proto
// Original file comments:
// inventory_client.proto (para comunicarse con el servicio de inventario)
#ifndef GRPC_inventory_5fclient_2eproto__INCLUDED
#define GRPC_inventory_5fclient_2eproto__INCLUDED

#include "inventory_client.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace inventory {

class InventoryService final {
 public:
  static constexpr char const* service_full_name() {
    return "inventory.InventoryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetBook(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::inventory::BookResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inventory::BookResponse>> AsyncGetBook(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inventory::BookResponse>>(AsyncGetBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inventory::BookResponse>> PrepareAsyncGetBook(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inventory::BookResponse>>(PrepareAsyncGetBookRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::inventory::UpdateStockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inventory::UpdateStockResponse>> AsyncUpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inventory::UpdateStockResponse>>(AsyncUpdateStockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inventory::UpdateStockResponse>> PrepareAsyncUpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::inventory::UpdateStockResponse>>(PrepareAsyncUpdateStockRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetBook(::grpc::ClientContext* context, const ::inventory::BookRequest* request, ::inventory::BookResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBook(::grpc::ClientContext* context, const ::inventory::BookRequest* request, ::inventory::BookResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest* request, ::inventory::UpdateStockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest* request, ::inventory::UpdateStockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inventory::BookResponse>* AsyncGetBookRaw(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inventory::BookResponse>* PrepareAsyncGetBookRaw(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inventory::UpdateStockResponse>* AsyncUpdateStockRaw(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::inventory::UpdateStockResponse>* PrepareAsyncUpdateStockRaw(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetBook(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::inventory::BookResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inventory::BookResponse>> AsyncGetBook(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inventory::BookResponse>>(AsyncGetBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inventory::BookResponse>> PrepareAsyncGetBook(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inventory::BookResponse>>(PrepareAsyncGetBookRaw(context, request, cq));
    }
    ::grpc::Status UpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::inventory::UpdateStockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inventory::UpdateStockResponse>> AsyncUpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inventory::UpdateStockResponse>>(AsyncUpdateStockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inventory::UpdateStockResponse>> PrepareAsyncUpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::inventory::UpdateStockResponse>>(PrepareAsyncUpdateStockRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetBook(::grpc::ClientContext* context, const ::inventory::BookRequest* request, ::inventory::BookResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBook(::grpc::ClientContext* context, const ::inventory::BookRequest* request, ::inventory::BookResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest* request, ::inventory::UpdateStockResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest* request, ::inventory::UpdateStockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::inventory::BookResponse>* AsyncGetBookRaw(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inventory::BookResponse>* PrepareAsyncGetBookRaw(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inventory::UpdateStockResponse>* AsyncUpdateStockRaw(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::inventory::UpdateStockResponse>* PrepareAsyncUpdateStockRaw(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetBook_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateStock_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetBook(::grpc::ServerContext* context, const ::inventory::BookRequest* request, ::inventory::BookResponse* response);
    virtual ::grpc::Status UpdateStock(::grpc::ServerContext* context, const ::inventory::UpdateStockRequest* request, ::inventory::UpdateStockResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBook() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* /*context*/, const ::inventory::BookRequest* /*request*/, ::inventory::BookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBook(::grpc::ServerContext* context, ::inventory::BookRequest* request, ::grpc::ServerAsyncResponseWriter< ::inventory::BookResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateStock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateStock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateStock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStock(::grpc::ServerContext* /*context*/, const ::inventory::UpdateStockRequest* /*request*/, ::inventory::UpdateStockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateStock(::grpc::ServerContext* context, ::inventory::UpdateStockRequest* request, ::grpc::ServerAsyncResponseWriter< ::inventory::UpdateStockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetBook<WithAsyncMethod_UpdateStock<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBook() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::inventory::BookRequest, ::inventory::BookResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inventory::BookRequest* request, ::inventory::BookResponse* response) { return this->GetBook(context, request, response); }));}
    void SetMessageAllocatorFor_GetBook(
        ::grpc::MessageAllocator< ::inventory::BookRequest, ::inventory::BookResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inventory::BookRequest, ::inventory::BookResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* /*context*/, const ::inventory::BookRequest* /*request*/, ::inventory::BookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBook(
      ::grpc::CallbackServerContext* /*context*/, const ::inventory::BookRequest* /*request*/, ::inventory::BookResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateStock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateStock() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::inventory::UpdateStockRequest, ::inventory::UpdateStockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::inventory::UpdateStockRequest* request, ::inventory::UpdateStockResponse* response) { return this->UpdateStock(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateStock(
        ::grpc::MessageAllocator< ::inventory::UpdateStockRequest, ::inventory::UpdateStockResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::inventory::UpdateStockRequest, ::inventory::UpdateStockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateStock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStock(::grpc::ServerContext* /*context*/, const ::inventory::UpdateStockRequest* /*request*/, ::inventory::UpdateStockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateStock(
      ::grpc::CallbackServerContext* /*context*/, const ::inventory::UpdateStockRequest* /*request*/, ::inventory::UpdateStockResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetBook<WithCallbackMethod_UpdateStock<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBook() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* /*context*/, const ::inventory::BookRequest* /*request*/, ::inventory::BookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateStock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateStock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateStock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStock(::grpc::ServerContext* /*context*/, const ::inventory::UpdateStockRequest* /*request*/, ::inventory::UpdateStockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBook() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* /*context*/, const ::inventory::BookRequest* /*request*/, ::inventory::BookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBook(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateStock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateStock() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateStock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStock(::grpc::ServerContext* /*context*/, const ::inventory::UpdateStockRequest* /*request*/, ::inventory::UpdateStockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateStock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBook() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBook(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* /*context*/, const ::inventory::BookRequest* /*request*/, ::inventory::BookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBook(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateStock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateStock() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateStock(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateStock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStock(::grpc::ServerContext* /*context*/, const ::inventory::UpdateStockRequest* /*request*/, ::inventory::UpdateStockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateStock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBook() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inventory::BookRequest, ::inventory::BookResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inventory::BookRequest, ::inventory::BookResponse>* streamer) {
                       return this->StreamedGetBook(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* /*context*/, const ::inventory::BookRequest* /*request*/, ::inventory::BookResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBook(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inventory::BookRequest,::inventory::BookResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateStock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateStock() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::inventory::UpdateStockRequest, ::inventory::UpdateStockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::inventory::UpdateStockRequest, ::inventory::UpdateStockResponse>* streamer) {
                       return this->StreamedUpdateStock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateStock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateStock(::grpc::ServerContext* /*context*/, const ::inventory::UpdateStockRequest* /*request*/, ::inventory::UpdateStockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateStock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::inventory::UpdateStockRequest,::inventory::UpdateStockResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetBook<WithStreamedUnaryMethod_UpdateStock<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetBook<WithStreamedUnaryMethod_UpdateStock<Service > > StreamedService;
};

}  // namespace inventory


#endif  // GRPC_inventory_5fclient_2eproto__INCLUDED
