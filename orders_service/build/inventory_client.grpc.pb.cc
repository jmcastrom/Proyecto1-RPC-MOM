// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: inventory_client.proto

#include "inventory_client.pb.h"
#include "inventory_client.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace inventory {

static const char* InventoryService_method_names[] = {
  "/inventory.InventoryService/GetBook",
  "/inventory.InventoryService/UpdateStock",
};

std::unique_ptr< InventoryService::Stub> InventoryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InventoryService::Stub> stub(new InventoryService::Stub(channel, options));
  return stub;
}

InventoryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBook_(InventoryService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateStock_(InventoryService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InventoryService::Stub::GetBook(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::inventory::BookResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inventory::BookRequest, ::inventory::BookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBook_, context, request, response);
}

void InventoryService::Stub::async::GetBook(::grpc::ClientContext* context, const ::inventory::BookRequest* request, ::inventory::BookResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inventory::BookRequest, ::inventory::BookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBook_, context, request, response, std::move(f));
}

void InventoryService::Stub::async::GetBook(::grpc::ClientContext* context, const ::inventory::BookRequest* request, ::inventory::BookResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inventory::BookResponse>* InventoryService::Stub::PrepareAsyncGetBookRaw(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inventory::BookResponse, ::inventory::BookRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBook_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inventory::BookResponse>* InventoryService::Stub::AsyncGetBookRaw(::grpc::ClientContext* context, const ::inventory::BookRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBookRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InventoryService::Stub::UpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::inventory::UpdateStockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::inventory::UpdateStockRequest, ::inventory::UpdateStockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateStock_, context, request, response);
}

void InventoryService::Stub::async::UpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest* request, ::inventory::UpdateStockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::inventory::UpdateStockRequest, ::inventory::UpdateStockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateStock_, context, request, response, std::move(f));
}

void InventoryService::Stub::async::UpdateStock(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest* request, ::inventory::UpdateStockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateStock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::inventory::UpdateStockResponse>* InventoryService::Stub::PrepareAsyncUpdateStockRaw(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::inventory::UpdateStockResponse, ::inventory::UpdateStockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateStock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::inventory::UpdateStockResponse>* InventoryService::Stub::AsyncUpdateStockRaw(::grpc::ClientContext* context, const ::inventory::UpdateStockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateStockRaw(context, request, cq);
  result->StartCall();
  return result;
}

InventoryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InventoryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InventoryService::Service, ::inventory::BookRequest, ::inventory::BookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InventoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inventory::BookRequest* req,
             ::inventory::BookResponse* resp) {
               return service->GetBook(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InventoryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InventoryService::Service, ::inventory::UpdateStockRequest, ::inventory::UpdateStockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InventoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::inventory::UpdateStockRequest* req,
             ::inventory::UpdateStockResponse* resp) {
               return service->UpdateStock(ctx, req, resp);
             }, this)));
}

InventoryService::Service::~Service() {
}

::grpc::Status InventoryService::Service::GetBook(::grpc::ServerContext* context, const ::inventory::BookRequest* request, ::inventory::BookResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InventoryService::Service::UpdateStock(::grpc::ServerContext* context, const ::inventory::UpdateStockRequest* request, ::inventory::UpdateStockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace inventory

