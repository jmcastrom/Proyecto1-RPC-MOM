// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory_client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_inventory_5fclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_inventory_5fclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_inventory_5fclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_inventory_5fclient_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inventory_5fclient_2eproto;
namespace inventory {
class BookRequest;
struct BookRequestDefaultTypeInternal;
extern BookRequestDefaultTypeInternal _BookRequest_default_instance_;
class BookResponse;
struct BookResponseDefaultTypeInternal;
extern BookResponseDefaultTypeInternal _BookResponse_default_instance_;
class UpdateStockRequest;
struct UpdateStockRequestDefaultTypeInternal;
extern UpdateStockRequestDefaultTypeInternal _UpdateStockRequest_default_instance_;
class UpdateStockResponse;
struct UpdateStockResponseDefaultTypeInternal;
extern UpdateStockResponseDefaultTypeInternal _UpdateStockResponse_default_instance_;
}  // namespace inventory
PROTOBUF_NAMESPACE_OPEN
template<> ::inventory::BookRequest* Arena::CreateMaybeMessage<::inventory::BookRequest>(Arena*);
template<> ::inventory::BookResponse* Arena::CreateMaybeMessage<::inventory::BookResponse>(Arena*);
template<> ::inventory::UpdateStockRequest* Arena::CreateMaybeMessage<::inventory::UpdateStockRequest>(Arena*);
template<> ::inventory::UpdateStockResponse* Arena::CreateMaybeMessage<::inventory::UpdateStockResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inventory {

// ===================================================================

class BookRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inventory.BookRequest) */ {
 public:
  inline BookRequest() : BookRequest(nullptr) {}
  ~BookRequest() override;
  explicit PROTOBUF_CONSTEXPR BookRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookRequest(const BookRequest& from);
  BookRequest(BookRequest&& from) noexcept
    : BookRequest() {
    *this = ::std::move(from);
  }

  inline BookRequest& operator=(const BookRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookRequest& operator=(BookRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookRequest* internal_default_instance() {
    return reinterpret_cast<const BookRequest*>(
               &_BookRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BookRequest& a, BookRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BookRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookRequest& from) {
    BookRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inventory.BookRequest";
  }
  protected:
  explicit BookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookIdFieldNumber = 1,
  };
  // string book_id = 1;
  void clear_book_id();
  const std::string& book_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_book_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_book_id();
  PROTOBUF_NODISCARD std::string* release_book_id();
  void set_allocated_book_id(std::string* book_id);
  private:
  const std::string& _internal_book_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_book_id(const std::string& value);
  std::string* _internal_mutable_book_id();
  public:

  // @@protoc_insertion_point(class_scope:inventory.BookRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr book_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inventory_5fclient_2eproto;
};
// -------------------------------------------------------------------

class BookResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inventory.BookResponse) */ {
 public:
  inline BookResponse() : BookResponse(nullptr) {}
  ~BookResponse() override;
  explicit PROTOBUF_CONSTEXPR BookResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookResponse(const BookResponse& from);
  BookResponse(BookResponse&& from) noexcept
    : BookResponse() {
    *this = ::std::move(from);
  }

  inline BookResponse& operator=(const BookResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookResponse& operator=(BookResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookResponse* internal_default_instance() {
    return reinterpret_cast<const BookResponse*>(
               &_BookResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BookResponse& a, BookResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BookResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookResponse& from) {
    BookResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inventory.BookResponse";
  }
  protected:
  explicit BookResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kAuthorFieldNumber = 3,
    kIsbnFieldNumber = 4,
    kPriceFieldNumber = 6,
    kStockFieldNumber = 5,
  };
  // string book_id = 1;
  void clear_book_id();
  const std::string& book_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_book_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_book_id();
  PROTOBUF_NODISCARD std::string* release_book_id();
  void set_allocated_book_id(std::string* book_id);
  private:
  const std::string& _internal_book_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_book_id(const std::string& value);
  std::string* _internal_mutable_book_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string author = 3;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // string isbn = 4;
  void clear_isbn();
  const std::string& isbn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_isbn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_isbn();
  PROTOBUF_NODISCARD std::string* release_isbn();
  void set_allocated_isbn(std::string* isbn);
  private:
  const std::string& _internal_isbn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isbn(const std::string& value);
  std::string* _internal_mutable_isbn();
  public:

  // double price = 6;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 stock = 5;
  void clear_stock();
  int32_t stock() const;
  void set_stock(int32_t value);
  private:
  int32_t _internal_stock() const;
  void _internal_set_stock(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inventory.BookResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr book_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isbn_;
    double price_;
    int32_t stock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inventory_5fclient_2eproto;
};
// -------------------------------------------------------------------

class UpdateStockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inventory.UpdateStockRequest) */ {
 public:
  inline UpdateStockRequest() : UpdateStockRequest(nullptr) {}
  ~UpdateStockRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateStockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateStockRequest(const UpdateStockRequest& from);
  UpdateStockRequest(UpdateStockRequest&& from) noexcept
    : UpdateStockRequest() {
    *this = ::std::move(from);
  }

  inline UpdateStockRequest& operator=(const UpdateStockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStockRequest& operator=(UpdateStockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateStockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateStockRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateStockRequest*>(
               &_UpdateStockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateStockRequest& a, UpdateStockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateStockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateStockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateStockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateStockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateStockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateStockRequest& from) {
    UpdateStockRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStockRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inventory.UpdateStockRequest";
  }
  protected:
  explicit UpdateStockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookIdFieldNumber = 1,
    kQuantityChangeFieldNumber = 2,
  };
  // string book_id = 1;
  void clear_book_id();
  const std::string& book_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_book_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_book_id();
  PROTOBUF_NODISCARD std::string* release_book_id();
  void set_allocated_book_id(std::string* book_id);
  private:
  const std::string& _internal_book_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_book_id(const std::string& value);
  std::string* _internal_mutable_book_id();
  public:

  // int32 quantity_change = 2;
  void clear_quantity_change();
  int32_t quantity_change() const;
  void set_quantity_change(int32_t value);
  private:
  int32_t _internal_quantity_change() const;
  void _internal_set_quantity_change(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inventory.UpdateStockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr book_id_;
    int32_t quantity_change_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inventory_5fclient_2eproto;
};
// -------------------------------------------------------------------

class UpdateStockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inventory.UpdateStockResponse) */ {
 public:
  inline UpdateStockResponse() : UpdateStockResponse(nullptr) {}
  ~UpdateStockResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateStockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateStockResponse(const UpdateStockResponse& from);
  UpdateStockResponse(UpdateStockResponse&& from) noexcept
    : UpdateStockResponse() {
    *this = ::std::move(from);
  }

  inline UpdateStockResponse& operator=(const UpdateStockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStockResponse& operator=(UpdateStockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateStockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateStockResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateStockResponse*>(
               &_UpdateStockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateStockResponse& a, UpdateStockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateStockResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateStockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateStockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateStockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateStockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateStockResponse& from) {
    UpdateStockResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStockResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inventory.UpdateStockResponse";
  }
  protected:
  explicit UpdateStockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kNewStockFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 new_stock = 2;
  void clear_new_stock();
  int32_t new_stock() const;
  void set_new_stock(int32_t value);
  private:
  int32_t _internal_new_stock() const;
  void _internal_set_new_stock(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:inventory.UpdateStockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    int32_t new_stock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inventory_5fclient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BookRequest

// string book_id = 1;
inline void BookRequest::clear_book_id() {
  _impl_.book_id_.ClearToEmpty();
}
inline const std::string& BookRequest::book_id() const {
  // @@protoc_insertion_point(field_get:inventory.BookRequest.book_id)
  return _internal_book_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookRequest::set_book_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.book_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inventory.BookRequest.book_id)
}
inline std::string* BookRequest::mutable_book_id() {
  std::string* _s = _internal_mutable_book_id();
  // @@protoc_insertion_point(field_mutable:inventory.BookRequest.book_id)
  return _s;
}
inline const std::string& BookRequest::_internal_book_id() const {
  return _impl_.book_id_.Get();
}
inline void BookRequest::_internal_set_book_id(const std::string& value) {
  
  _impl_.book_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BookRequest::_internal_mutable_book_id() {
  
  return _impl_.book_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BookRequest::release_book_id() {
  // @@protoc_insertion_point(field_release:inventory.BookRequest.book_id)
  return _impl_.book_id_.Release();
}
inline void BookRequest::set_allocated_book_id(std::string* book_id) {
  if (book_id != nullptr) {
    
  } else {
    
  }
  _impl_.book_id_.SetAllocated(book_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.book_id_.IsDefault()) {
    _impl_.book_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inventory.BookRequest.book_id)
}

// -------------------------------------------------------------------

// BookResponse

// string book_id = 1;
inline void BookResponse::clear_book_id() {
  _impl_.book_id_.ClearToEmpty();
}
inline const std::string& BookResponse::book_id() const {
  // @@protoc_insertion_point(field_get:inventory.BookResponse.book_id)
  return _internal_book_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookResponse::set_book_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.book_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inventory.BookResponse.book_id)
}
inline std::string* BookResponse::mutable_book_id() {
  std::string* _s = _internal_mutable_book_id();
  // @@protoc_insertion_point(field_mutable:inventory.BookResponse.book_id)
  return _s;
}
inline const std::string& BookResponse::_internal_book_id() const {
  return _impl_.book_id_.Get();
}
inline void BookResponse::_internal_set_book_id(const std::string& value) {
  
  _impl_.book_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BookResponse::_internal_mutable_book_id() {
  
  return _impl_.book_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BookResponse::release_book_id() {
  // @@protoc_insertion_point(field_release:inventory.BookResponse.book_id)
  return _impl_.book_id_.Release();
}
inline void BookResponse::set_allocated_book_id(std::string* book_id) {
  if (book_id != nullptr) {
    
  } else {
    
  }
  _impl_.book_id_.SetAllocated(book_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.book_id_.IsDefault()) {
    _impl_.book_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inventory.BookResponse.book_id)
}

// string title = 2;
inline void BookResponse::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& BookResponse::title() const {
  // @@protoc_insertion_point(field_get:inventory.BookResponse.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookResponse::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inventory.BookResponse.title)
}
inline std::string* BookResponse::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:inventory.BookResponse.title)
  return _s;
}
inline const std::string& BookResponse::_internal_title() const {
  return _impl_.title_.Get();
}
inline void BookResponse::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* BookResponse::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* BookResponse::release_title() {
  // @@protoc_insertion_point(field_release:inventory.BookResponse.title)
  return _impl_.title_.Release();
}
inline void BookResponse::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inventory.BookResponse.title)
}

// string author = 3;
inline void BookResponse::clear_author() {
  _impl_.author_.ClearToEmpty();
}
inline const std::string& BookResponse::author() const {
  // @@protoc_insertion_point(field_get:inventory.BookResponse.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookResponse::set_author(ArgT0&& arg0, ArgT... args) {
 
 _impl_.author_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inventory.BookResponse.author)
}
inline std::string* BookResponse::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:inventory.BookResponse.author)
  return _s;
}
inline const std::string& BookResponse::_internal_author() const {
  return _impl_.author_.Get();
}
inline void BookResponse::_internal_set_author(const std::string& value) {
  
  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* BookResponse::_internal_mutable_author() {
  
  return _impl_.author_.Mutable(GetArenaForAllocation());
}
inline std::string* BookResponse::release_author() {
  // @@protoc_insertion_point(field_release:inventory.BookResponse.author)
  return _impl_.author_.Release();
}
inline void BookResponse::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  _impl_.author_.SetAllocated(author, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inventory.BookResponse.author)
}

// string isbn = 4;
inline void BookResponse::clear_isbn() {
  _impl_.isbn_.ClearToEmpty();
}
inline const std::string& BookResponse::isbn() const {
  // @@protoc_insertion_point(field_get:inventory.BookResponse.isbn)
  return _internal_isbn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookResponse::set_isbn(ArgT0&& arg0, ArgT... args) {
 
 _impl_.isbn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inventory.BookResponse.isbn)
}
inline std::string* BookResponse::mutable_isbn() {
  std::string* _s = _internal_mutable_isbn();
  // @@protoc_insertion_point(field_mutable:inventory.BookResponse.isbn)
  return _s;
}
inline const std::string& BookResponse::_internal_isbn() const {
  return _impl_.isbn_.Get();
}
inline void BookResponse::_internal_set_isbn(const std::string& value) {
  
  _impl_.isbn_.Set(value, GetArenaForAllocation());
}
inline std::string* BookResponse::_internal_mutable_isbn() {
  
  return _impl_.isbn_.Mutable(GetArenaForAllocation());
}
inline std::string* BookResponse::release_isbn() {
  // @@protoc_insertion_point(field_release:inventory.BookResponse.isbn)
  return _impl_.isbn_.Release();
}
inline void BookResponse::set_allocated_isbn(std::string* isbn) {
  if (isbn != nullptr) {
    
  } else {
    
  }
  _impl_.isbn_.SetAllocated(isbn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.isbn_.IsDefault()) {
    _impl_.isbn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inventory.BookResponse.isbn)
}

// int32 stock = 5;
inline void BookResponse::clear_stock() {
  _impl_.stock_ = 0;
}
inline int32_t BookResponse::_internal_stock() const {
  return _impl_.stock_;
}
inline int32_t BookResponse::stock() const {
  // @@protoc_insertion_point(field_get:inventory.BookResponse.stock)
  return _internal_stock();
}
inline void BookResponse::_internal_set_stock(int32_t value) {
  
  _impl_.stock_ = value;
}
inline void BookResponse::set_stock(int32_t value) {
  _internal_set_stock(value);
  // @@protoc_insertion_point(field_set:inventory.BookResponse.stock)
}

// double price = 6;
inline void BookResponse::clear_price() {
  _impl_.price_ = 0;
}
inline double BookResponse::_internal_price() const {
  return _impl_.price_;
}
inline double BookResponse::price() const {
  // @@protoc_insertion_point(field_get:inventory.BookResponse.price)
  return _internal_price();
}
inline void BookResponse::_internal_set_price(double value) {
  
  _impl_.price_ = value;
}
inline void BookResponse::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:inventory.BookResponse.price)
}

// -------------------------------------------------------------------

// UpdateStockRequest

// string book_id = 1;
inline void UpdateStockRequest::clear_book_id() {
  _impl_.book_id_.ClearToEmpty();
}
inline const std::string& UpdateStockRequest::book_id() const {
  // @@protoc_insertion_point(field_get:inventory.UpdateStockRequest.book_id)
  return _internal_book_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateStockRequest::set_book_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.book_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inventory.UpdateStockRequest.book_id)
}
inline std::string* UpdateStockRequest::mutable_book_id() {
  std::string* _s = _internal_mutable_book_id();
  // @@protoc_insertion_point(field_mutable:inventory.UpdateStockRequest.book_id)
  return _s;
}
inline const std::string& UpdateStockRequest::_internal_book_id() const {
  return _impl_.book_id_.Get();
}
inline void UpdateStockRequest::_internal_set_book_id(const std::string& value) {
  
  _impl_.book_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateStockRequest::_internal_mutable_book_id() {
  
  return _impl_.book_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateStockRequest::release_book_id() {
  // @@protoc_insertion_point(field_release:inventory.UpdateStockRequest.book_id)
  return _impl_.book_id_.Release();
}
inline void UpdateStockRequest::set_allocated_book_id(std::string* book_id) {
  if (book_id != nullptr) {
    
  } else {
    
  }
  _impl_.book_id_.SetAllocated(book_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.book_id_.IsDefault()) {
    _impl_.book_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inventory.UpdateStockRequest.book_id)
}

// int32 quantity_change = 2;
inline void UpdateStockRequest::clear_quantity_change() {
  _impl_.quantity_change_ = 0;
}
inline int32_t UpdateStockRequest::_internal_quantity_change() const {
  return _impl_.quantity_change_;
}
inline int32_t UpdateStockRequest::quantity_change() const {
  // @@protoc_insertion_point(field_get:inventory.UpdateStockRequest.quantity_change)
  return _internal_quantity_change();
}
inline void UpdateStockRequest::_internal_set_quantity_change(int32_t value) {
  
  _impl_.quantity_change_ = value;
}
inline void UpdateStockRequest::set_quantity_change(int32_t value) {
  _internal_set_quantity_change(value);
  // @@protoc_insertion_point(field_set:inventory.UpdateStockRequest.quantity_change)
}

// -------------------------------------------------------------------

// UpdateStockResponse

// bool success = 1;
inline void UpdateStockResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool UpdateStockResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool UpdateStockResponse::success() const {
  // @@protoc_insertion_point(field_get:inventory.UpdateStockResponse.success)
  return _internal_success();
}
inline void UpdateStockResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void UpdateStockResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:inventory.UpdateStockResponse.success)
}

// int32 new_stock = 2;
inline void UpdateStockResponse::clear_new_stock() {
  _impl_.new_stock_ = 0;
}
inline int32_t UpdateStockResponse::_internal_new_stock() const {
  return _impl_.new_stock_;
}
inline int32_t UpdateStockResponse::new_stock() const {
  // @@protoc_insertion_point(field_get:inventory.UpdateStockResponse.new_stock)
  return _internal_new_stock();
}
inline void UpdateStockResponse::_internal_set_new_stock(int32_t value) {
  
  _impl_.new_stock_ = value;
}
inline void UpdateStockResponse::set_new_stock(int32_t value) {
  _internal_set_new_stock(value);
  // @@protoc_insertion_point(field_set:inventory.UpdateStockResponse.new_stock)
}

// string message = 3;
inline void UpdateStockResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UpdateStockResponse::message() const {
  // @@protoc_insertion_point(field_get:inventory.UpdateStockResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateStockResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:inventory.UpdateStockResponse.message)
}
inline std::string* UpdateStockResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:inventory.UpdateStockResponse.message)
  return _s;
}
inline const std::string& UpdateStockResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void UpdateStockResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateStockResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateStockResponse::release_message() {
  // @@protoc_insertion_point(field_release:inventory.UpdateStockResponse.message)
  return _impl_.message_.Release();
}
inline void UpdateStockResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:inventory.UpdateStockResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inventory

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_inventory_5fclient_2eproto
