// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mom.proto

#include "mom.pb.h"
#include "mom.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mom {

static const char* MomService_method_names[] = {
  "/mom.MomService/GetBook",
  "/mom.MomService/SearchBooks",
  "/mom.MomService/RegisterUser",
  "/mom.MomService/AuthenticateUser",
  "/mom.MomService/GetUser",
  "/mom.MomService/UpdateUser",
  "/mom.MomService/CreateOrder",
  "/mom.MomService/GetOrder",
  "/mom.MomService/ListOrdersByUser",
};

std::unique_ptr< MomService::Stub> MomService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MomService::Stub> stub(new MomService::Stub(channel, options));
  return stub;
}

MomService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBook_(MomService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchBooks_(MomService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterUser_(MomService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticateUser_(MomService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUser_(MomService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUser_(MomService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateOrder_(MomService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrder_(MomService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOrdersByUser_(MomService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MomService::Stub::GetBook(::grpc::ClientContext* context, const ::mom::BookRequest& request, ::mom::BookResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::BookRequest, ::mom::BookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBook_, context, request, response);
}

void MomService::Stub::async::GetBook(::grpc::ClientContext* context, const ::mom::BookRequest* request, ::mom::BookResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::BookRequest, ::mom::BookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBook_, context, request, response, std::move(f));
}

void MomService::Stub::async::GetBook(::grpc::ClientContext* context, const ::mom::BookRequest* request, ::mom::BookResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::BookResponse>* MomService::Stub::PrepareAsyncGetBookRaw(::grpc::ClientContext* context, const ::mom::BookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::BookResponse, ::mom::BookRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBook_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::BookResponse>* MomService::Stub::AsyncGetBookRaw(::grpc::ClientContext* context, const ::mom::BookRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBookRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MomService::Stub::SearchBooks(::grpc::ClientContext* context, const ::mom::SearchRequest& request, ::mom::SearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::SearchRequest, ::mom::SearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchBooks_, context, request, response);
}

void MomService::Stub::async::SearchBooks(::grpc::ClientContext* context, const ::mom::SearchRequest* request, ::mom::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::SearchRequest, ::mom::SearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchBooks_, context, request, response, std::move(f));
}

void MomService::Stub::async::SearchBooks(::grpc::ClientContext* context, const ::mom::SearchRequest* request, ::mom::SearchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchBooks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::SearchResponse>* MomService::Stub::PrepareAsyncSearchBooksRaw(::grpc::ClientContext* context, const ::mom::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::SearchResponse, ::mom::SearchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchBooks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::SearchResponse>* MomService::Stub::AsyncSearchBooksRaw(::grpc::ClientContext* context, const ::mom::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchBooksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MomService::Stub::RegisterUser(::grpc::ClientContext* context, const ::mom::RegisterRequest& request, ::mom::UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::RegisterRequest, ::mom::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterUser_, context, request, response);
}

void MomService::Stub::async::RegisterUser(::grpc::ClientContext* context, const ::mom::RegisterRequest* request, ::mom::UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::RegisterRequest, ::mom::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, std::move(f));
}

void MomService::Stub::async::RegisterUser(::grpc::ClientContext* context, const ::mom::RegisterRequest* request, ::mom::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::UserResponse>* MomService::Stub::PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::mom::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::UserResponse, ::mom::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::UserResponse>* MomService::Stub::AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::mom::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MomService::Stub::AuthenticateUser(::grpc::ClientContext* context, const ::mom::AuthRequest& request, ::mom::AuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::AuthRequest, ::mom::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuthenticateUser_, context, request, response);
}

void MomService::Stub::async::AuthenticateUser(::grpc::ClientContext* context, const ::mom::AuthRequest* request, ::mom::AuthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::AuthRequest, ::mom::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticateUser_, context, request, response, std::move(f));
}

void MomService::Stub::async::AuthenticateUser(::grpc::ClientContext* context, const ::mom::AuthRequest* request, ::mom::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuthenticateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::AuthResponse>* MomService::Stub::PrepareAsyncAuthenticateUserRaw(::grpc::ClientContext* context, const ::mom::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::AuthResponse, ::mom::AuthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuthenticateUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::AuthResponse>* MomService::Stub::AsyncAuthenticateUserRaw(::grpc::ClientContext* context, const ::mom::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthenticateUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MomService::Stub::GetUser(::grpc::ClientContext* context, const ::mom::GetUserRequest& request, ::mom::UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::GetUserRequest, ::mom::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUser_, context, request, response);
}

void MomService::Stub::async::GetUser(::grpc::ClientContext* context, const ::mom::GetUserRequest* request, ::mom::UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::GetUserRequest, ::mom::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, std::move(f));
}

void MomService::Stub::async::GetUser(::grpc::ClientContext* context, const ::mom::GetUserRequest* request, ::mom::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::UserResponse>* MomService::Stub::PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::mom::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::UserResponse, ::mom::GetUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::UserResponse>* MomService::Stub::AsyncGetUserRaw(::grpc::ClientContext* context, const ::mom::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MomService::Stub::UpdateUser(::grpc::ClientContext* context, const ::mom::UpdateUserRequest& request, ::mom::UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::UpdateUserRequest, ::mom::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateUser_, context, request, response);
}

void MomService::Stub::async::UpdateUser(::grpc::ClientContext* context, const ::mom::UpdateUserRequest* request, ::mom::UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::UpdateUserRequest, ::mom::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, std::move(f));
}

void MomService::Stub::async::UpdateUser(::grpc::ClientContext* context, const ::mom::UpdateUserRequest* request, ::mom::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::UserResponse>* MomService::Stub::PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::mom::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::UserResponse, ::mom::UpdateUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::UserResponse>* MomService::Stub::AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::mom::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MomService::Stub::CreateOrder(::grpc::ClientContext* context, const ::mom::CreateOrderRequest& request, ::mom::OrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::CreateOrderRequest, ::mom::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateOrder_, context, request, response);
}

void MomService::Stub::async::CreateOrder(::grpc::ClientContext* context, const ::mom::CreateOrderRequest* request, ::mom::OrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::CreateOrderRequest, ::mom::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateOrder_, context, request, response, std::move(f));
}

void MomService::Stub::async::CreateOrder(::grpc::ClientContext* context, const ::mom::CreateOrderRequest* request, ::mom::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::OrderResponse>* MomService::Stub::PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::mom::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::OrderResponse, ::mom::CreateOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::OrderResponse>* MomService::Stub::AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::mom::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MomService::Stub::GetOrder(::grpc::ClientContext* context, const ::mom::GetOrderRequest& request, ::mom::OrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::GetOrderRequest, ::mom::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOrder_, context, request, response);
}

void MomService::Stub::async::GetOrder(::grpc::ClientContext* context, const ::mom::GetOrderRequest* request, ::mom::OrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::GetOrderRequest, ::mom::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrder_, context, request, response, std::move(f));
}

void MomService::Stub::async::GetOrder(::grpc::ClientContext* context, const ::mom::GetOrderRequest* request, ::mom::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::OrderResponse>* MomService::Stub::PrepareAsyncGetOrderRaw(::grpc::ClientContext* context, const ::mom::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::OrderResponse, ::mom::GetOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::OrderResponse>* MomService::Stub::AsyncGetOrderRaw(::grpc::ClientContext* context, const ::mom::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MomService::Stub::ListOrdersByUser(::grpc::ClientContext* context, const ::mom::ListOrdersRequest& request, ::mom::ListOrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::ListOrdersRequest, ::mom::ListOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListOrdersByUser_, context, request, response);
}

void MomService::Stub::async::ListOrdersByUser(::grpc::ClientContext* context, const ::mom::ListOrdersRequest* request, ::mom::ListOrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::ListOrdersRequest, ::mom::ListOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListOrdersByUser_, context, request, response, std::move(f));
}

void MomService::Stub::async::ListOrdersByUser(::grpc::ClientContext* context, const ::mom::ListOrdersRequest* request, ::mom::ListOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListOrdersByUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::ListOrdersResponse>* MomService::Stub::PrepareAsyncListOrdersByUserRaw(::grpc::ClientContext* context, const ::mom::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::ListOrdersResponse, ::mom::ListOrdersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListOrdersByUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::ListOrdersResponse>* MomService::Stub::AsyncListOrdersByUserRaw(::grpc::ClientContext* context, const ::mom::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListOrdersByUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

MomService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MomService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MomService::Service, ::mom::BookRequest, ::mom::BookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::BookRequest* req,
             ::mom::BookResponse* resp) {
               return service->GetBook(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MomService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MomService::Service, ::mom::SearchRequest, ::mom::SearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::SearchRequest* req,
             ::mom::SearchResponse* resp) {
               return service->SearchBooks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MomService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MomService::Service, ::mom::RegisterRequest, ::mom::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::RegisterRequest* req,
             ::mom::UserResponse* resp) {
               return service->RegisterUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MomService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MomService::Service, ::mom::AuthRequest, ::mom::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::AuthRequest* req,
             ::mom::AuthResponse* resp) {
               return service->AuthenticateUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MomService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MomService::Service, ::mom::GetUserRequest, ::mom::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::GetUserRequest* req,
             ::mom::UserResponse* resp) {
               return service->GetUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MomService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MomService::Service, ::mom::UpdateUserRequest, ::mom::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::UpdateUserRequest* req,
             ::mom::UserResponse* resp) {
               return service->UpdateUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MomService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MomService::Service, ::mom::CreateOrderRequest, ::mom::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::CreateOrderRequest* req,
             ::mom::OrderResponse* resp) {
               return service->CreateOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MomService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MomService::Service, ::mom::GetOrderRequest, ::mom::OrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::GetOrderRequest* req,
             ::mom::OrderResponse* resp) {
               return service->GetOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MomService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MomService::Service, ::mom::ListOrdersRequest, ::mom::ListOrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MomService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::ListOrdersRequest* req,
             ::mom::ListOrdersResponse* resp) {
               return service->ListOrdersByUser(ctx, req, resp);
             }, this)));
}

MomService::Service::~Service() {
}

::grpc::Status MomService::Service::GetBook(::grpc::ServerContext* context, const ::mom::BookRequest* request, ::mom::BookResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MomService::Service::SearchBooks(::grpc::ServerContext* context, const ::mom::SearchRequest* request, ::mom::SearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MomService::Service::RegisterUser(::grpc::ServerContext* context, const ::mom::RegisterRequest* request, ::mom::UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MomService::Service::AuthenticateUser(::grpc::ServerContext* context, const ::mom::AuthRequest* request, ::mom::AuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MomService::Service::GetUser(::grpc::ServerContext* context, const ::mom::GetUserRequest* request, ::mom::UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MomService::Service::UpdateUser(::grpc::ServerContext* context, const ::mom::UpdateUserRequest* request, ::mom::UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MomService::Service::CreateOrder(::grpc::ServerContext* context, const ::mom::CreateOrderRequest* request, ::mom::OrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MomService::Service::GetOrder(::grpc::ServerContext* context, const ::mom::GetOrderRequest* request, ::mom::OrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MomService::Service::ListOrdersByUser(::grpc::ServerContext* context, const ::mom::ListOrdersRequest* request, ::mom::ListOrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mom

