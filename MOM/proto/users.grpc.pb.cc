// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: users.proto

#include "users.pb.h"
#include "users.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace users {

static const char* UsersService_method_names[] = {
  "/users.UsersService/Register",
  "/users.UsersService/GetUser",
  "/users.UsersService/UpdateUser",
  "/users.UsersService/Authenticate",
};

std::unique_ptr< UsersService::Stub> UsersService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UsersService::Stub> stub(new UsersService::Stub(channel, options));
  return stub;
}

UsersService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Register_(UsersService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUser_(UsersService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUser_(UsersService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Authenticate_(UsersService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UsersService::Stub::Register(::grpc::ClientContext* context, const ::users::RegisterRequest& request, ::users::UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::users::RegisterRequest, ::users::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_, context, request, response);
}

void UsersService::Stub::async::Register(::grpc::ClientContext* context, const ::users::RegisterRequest* request, ::users::UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::users::RegisterRequest, ::users::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void UsersService::Stub::async::Register(::grpc::ClientContext* context, const ::users::RegisterRequest* request, ::users::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::users::UserResponse>* UsersService::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::users::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::users::UserResponse, ::users::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::users::UserResponse>* UsersService::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::users::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UsersService::Stub::GetUser(::grpc::ClientContext* context, const ::users::GetUserRequest& request, ::users::UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::users::GetUserRequest, ::users::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUser_, context, request, response);
}

void UsersService::Stub::async::GetUser(::grpc::ClientContext* context, const ::users::GetUserRequest* request, ::users::UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::users::GetUserRequest, ::users::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, std::move(f));
}

void UsersService::Stub::async::GetUser(::grpc::ClientContext* context, const ::users::GetUserRequest* request, ::users::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::users::UserResponse>* UsersService::Stub::PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::users::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::users::UserResponse, ::users::GetUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::users::UserResponse>* UsersService::Stub::AsyncGetUserRaw(::grpc::ClientContext* context, const ::users::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UsersService::Stub::UpdateUser(::grpc::ClientContext* context, const ::users::UpdateUserRequest& request, ::users::UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::users::UpdateUserRequest, ::users::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateUser_, context, request, response);
}

void UsersService::Stub::async::UpdateUser(::grpc::ClientContext* context, const ::users::UpdateUserRequest* request, ::users::UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::users::UpdateUserRequest, ::users::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, std::move(f));
}

void UsersService::Stub::async::UpdateUser(::grpc::ClientContext* context, const ::users::UpdateUserRequest* request, ::users::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::users::UserResponse>* UsersService::Stub::PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::users::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::users::UserResponse, ::users::UpdateUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::users::UserResponse>* UsersService::Stub::AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::users::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UsersService::Stub::Authenticate(::grpc::ClientContext* context, const ::users::AuthRequest& request, ::users::AuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::users::AuthRequest, ::users::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Authenticate_, context, request, response);
}

void UsersService::Stub::async::Authenticate(::grpc::ClientContext* context, const ::users::AuthRequest* request, ::users::AuthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::users::AuthRequest, ::users::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, std::move(f));
}

void UsersService::Stub::async::Authenticate(::grpc::ClientContext* context, const ::users::AuthRequest* request, ::users::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::users::AuthResponse>* UsersService::Stub::PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::users::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::users::AuthResponse, ::users::AuthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Authenticate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::users::AuthResponse>* UsersService::Stub::AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::users::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthenticateRaw(context, request, cq);
  result->StartCall();
  return result;
}

UsersService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UsersService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UsersService::Service, ::users::RegisterRequest, ::users::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UsersService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::users::RegisterRequest* req,
             ::users::UserResponse* resp) {
               return service->Register(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UsersService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UsersService::Service, ::users::GetUserRequest, ::users::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UsersService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::users::GetUserRequest* req,
             ::users::UserResponse* resp) {
               return service->GetUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UsersService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UsersService::Service, ::users::UpdateUserRequest, ::users::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UsersService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::users::UpdateUserRequest* req,
             ::users::UserResponse* resp) {
               return service->UpdateUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UsersService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UsersService::Service, ::users::AuthRequest, ::users::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UsersService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::users::AuthRequest* req,
             ::users::AuthResponse* resp) {
               return service->Authenticate(ctx, req, resp);
             }, this)));
}

UsersService::Service::~Service() {
}

::grpc::Status UsersService::Service::Register(::grpc::ServerContext* context, const ::users::RegisterRequest* request, ::users::UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UsersService::Service::GetUser(::grpc::ServerContext* context, const ::users::GetUserRequest* request, ::users::UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UsersService::Service::UpdateUser(::grpc::ServerContext* context, const ::users::UpdateUserRequest* request, ::users::UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UsersService::Service::Authenticate(::grpc::ServerContext* context, const ::users::AuthRequest* request, ::users::AuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace users

