// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: orders_service.proto
#ifndef GRPC_orders_5fservice_2eproto__INCLUDED
#define GRPC_orders_5fservice_2eproto__INCLUDED

#include "orders_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace orders {

class OrdersService final {
 public:
  static constexpr char const* service_full_name() {
    return "orders.OrdersService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::orders::OrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orders::OrderResponse>> AsyncCreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orders::OrderResponse>>(AsyncCreateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orders::OrderResponse>> PrepareAsyncCreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orders::OrderResponse>>(PrepareAsyncCreateOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::orders::OrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orders::OrderResponse>> AsyncGetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orders::OrderResponse>>(AsyncGetOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orders::OrderResponse>> PrepareAsyncGetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orders::OrderResponse>>(PrepareAsyncGetOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status ListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::orders::ListOrdersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orders::ListOrdersResponse>> AsyncListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orders::ListOrdersResponse>>(AsyncListOrdersByUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orders::ListOrdersResponse>> PrepareAsyncListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::orders::ListOrdersResponse>>(PrepareAsyncListOrdersByUserRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest* request, ::orders::OrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest* request, ::orders::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest* request, ::orders::OrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest* request, ::orders::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest* request, ::orders::ListOrdersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest* request, ::orders::ListOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orders::OrderResponse>* AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orders::OrderResponse>* PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orders::OrderResponse>* AsyncGetOrderRaw(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orders::OrderResponse>* PrepareAsyncGetOrderRaw(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orders::ListOrdersResponse>* AsyncListOrdersByUserRaw(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::orders::ListOrdersResponse>* PrepareAsyncListOrdersByUserRaw(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::orders::OrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>> AsyncCreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>>(AsyncCreateOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>> PrepareAsyncCreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>>(PrepareAsyncCreateOrderRaw(context, request, cq));
    }
    ::grpc::Status GetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::orders::OrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>> AsyncGetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>>(AsyncGetOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>> PrepareAsyncGetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>>(PrepareAsyncGetOrderRaw(context, request, cq));
    }
    ::grpc::Status ListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::orders::ListOrdersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orders::ListOrdersResponse>> AsyncListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orders::ListOrdersResponse>>(AsyncListOrdersByUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orders::ListOrdersResponse>> PrepareAsyncListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::orders::ListOrdersResponse>>(PrepareAsyncListOrdersByUserRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest* request, ::orders::OrderResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateOrder(::grpc::ClientContext* context, const ::orders::CreateOrderRequest* request, ::orders::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest* request, ::orders::OrderResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOrder(::grpc::ClientContext* context, const ::orders::GetOrderRequest* request, ::orders::OrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest* request, ::orders::ListOrdersResponse* response, std::function<void(::grpc::Status)>) override;
      void ListOrdersByUser(::grpc::ClientContext* context, const ::orders::ListOrdersRequest* request, ::orders::ListOrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>* AsyncCreateOrderRaw(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>* PrepareAsyncCreateOrderRaw(::grpc::ClientContext* context, const ::orders::CreateOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>* AsyncGetOrderRaw(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orders::OrderResponse>* PrepareAsyncGetOrderRaw(::grpc::ClientContext* context, const ::orders::GetOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orders::ListOrdersResponse>* AsyncListOrdersByUserRaw(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::orders::ListOrdersResponse>* PrepareAsyncListOrdersByUserRaw(::grpc::ClientContext* context, const ::orders::ListOrdersRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_ListOrdersByUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateOrder(::grpc::ServerContext* context, const ::orders::CreateOrderRequest* request, ::orders::OrderResponse* response);
    virtual ::grpc::Status GetOrder(::grpc::ServerContext* context, const ::orders::GetOrderRequest* request, ::orders::OrderResponse* response);
    virtual ::grpc::Status ListOrdersByUser(::grpc::ServerContext* context, const ::orders::ListOrdersRequest* request, ::orders::ListOrdersResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateOrder() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::orders::CreateOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrder(::grpc::ServerContext* context, ::orders::CreateOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::orders::OrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOrder() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrder(::grpc::ServerContext* /*context*/, const ::orders::GetOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrder(::grpc::ServerContext* context, ::orders::GetOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::orders::OrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListOrdersByUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListOrdersByUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListOrdersByUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrdersByUser(::grpc::ServerContext* /*context*/, const ::orders::ListOrdersRequest* /*request*/, ::orders::ListOrdersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrdersByUser(::grpc::ServerContext* context, ::orders::ListOrdersRequest* request, ::grpc::ServerAsyncResponseWriter< ::orders::ListOrdersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateOrder<WithAsyncMethod_GetOrder<WithAsyncMethod_ListOrdersByUser<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateOrder() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::orders::CreateOrderRequest, ::orders::OrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::orders::CreateOrderRequest* request, ::orders::OrderResponse* response) { return this->CreateOrder(context, request, response); }));}
    void SetMessageAllocatorFor_CreateOrder(
        ::grpc::MessageAllocator< ::orders::CreateOrderRequest, ::orders::OrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::orders::CreateOrderRequest, ::orders::OrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::orders::CreateOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::orders::CreateOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOrder() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::orders::GetOrderRequest, ::orders::OrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::orders::GetOrderRequest* request, ::orders::OrderResponse* response) { return this->GetOrder(context, request, response); }));}
    void SetMessageAllocatorFor_GetOrder(
        ::grpc::MessageAllocator< ::orders::GetOrderRequest, ::orders::OrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::orders::GetOrderRequest, ::orders::OrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrder(::grpc::ServerContext* /*context*/, const ::orders::GetOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::orders::GetOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListOrdersByUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListOrdersByUser() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::orders::ListOrdersRequest, ::orders::ListOrdersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::orders::ListOrdersRequest* request, ::orders::ListOrdersResponse* response) { return this->ListOrdersByUser(context, request, response); }));}
    void SetMessageAllocatorFor_ListOrdersByUser(
        ::grpc::MessageAllocator< ::orders::ListOrdersRequest, ::orders::ListOrdersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::orders::ListOrdersRequest, ::orders::ListOrdersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListOrdersByUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrdersByUser(::grpc::ServerContext* /*context*/, const ::orders::ListOrdersRequest* /*request*/, ::orders::ListOrdersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListOrdersByUser(
      ::grpc::CallbackServerContext* /*context*/, const ::orders::ListOrdersRequest* /*request*/, ::orders::ListOrdersResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateOrder<WithCallbackMethod_GetOrder<WithCallbackMethod_ListOrdersByUser<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateOrder() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::orders::CreateOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOrder() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrder(::grpc::ServerContext* /*context*/, const ::orders::GetOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListOrdersByUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListOrdersByUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListOrdersByUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrdersByUser(::grpc::ServerContext* /*context*/, const ::orders::ListOrdersRequest* /*request*/, ::orders::ListOrdersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateOrder() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::orders::CreateOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOrder() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrder(::grpc::ServerContext* /*context*/, const ::orders::GetOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListOrdersByUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListOrdersByUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListOrdersByUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrdersByUser(::grpc::ServerContext* /*context*/, const ::orders::ListOrdersRequest* /*request*/, ::orders::ListOrdersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrdersByUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateOrder() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::orders::CreateOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOrder() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrder(::grpc::ServerContext* /*context*/, const ::orders::GetOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListOrdersByUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListOrdersByUser() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListOrdersByUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListOrdersByUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrdersByUser(::grpc::ServerContext* /*context*/, const ::orders::ListOrdersRequest* /*request*/, ::orders::ListOrdersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListOrdersByUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateOrder() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::orders::CreateOrderRequest, ::orders::OrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::orders::CreateOrderRequest, ::orders::OrderResponse>* streamer) {
                       return this->StreamedCreateOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOrder(::grpc::ServerContext* /*context*/, const ::orders::CreateOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::orders::CreateOrderRequest,::orders::OrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOrder() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::orders::GetOrderRequest, ::orders::OrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::orders::GetOrderRequest, ::orders::OrderResponse>* streamer) {
                       return this->StreamedGetOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrder(::grpc::ServerContext* /*context*/, const ::orders::GetOrderRequest* /*request*/, ::orders::OrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::orders::GetOrderRequest,::orders::OrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListOrdersByUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListOrdersByUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::orders::ListOrdersRequest, ::orders::ListOrdersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::orders::ListOrdersRequest, ::orders::ListOrdersResponse>* streamer) {
                       return this->StreamedListOrdersByUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListOrdersByUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListOrdersByUser(::grpc::ServerContext* /*context*/, const ::orders::ListOrdersRequest* /*request*/, ::orders::ListOrdersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListOrdersByUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::orders::ListOrdersRequest,::orders::ListOrdersResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateOrder<WithStreamedUnaryMethod_GetOrder<WithStreamedUnaryMethod_ListOrdersByUser<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateOrder<WithStreamedUnaryMethod_GetOrder<WithStreamedUnaryMethod_ListOrdersByUser<Service > > > StreamedService;
};

}  // namespace orders


#endif  // GRPC_orders_5fservice_2eproto__INCLUDED
