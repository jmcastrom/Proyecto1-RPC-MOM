// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orders_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_orders_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_orders_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_orders_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_orders_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_orders_5fservice_2eproto;
namespace orders {
class CreateOrderRequest;
struct CreateOrderRequestDefaultTypeInternal;
extern CreateOrderRequestDefaultTypeInternal _CreateOrderRequest_default_instance_;
class GetOrderRequest;
struct GetOrderRequestDefaultTypeInternal;
extern GetOrderRequestDefaultTypeInternal _GetOrderRequest_default_instance_;
class ListOrdersRequest;
struct ListOrdersRequestDefaultTypeInternal;
extern ListOrdersRequestDefaultTypeInternal _ListOrdersRequest_default_instance_;
class ListOrdersResponse;
struct ListOrdersResponseDefaultTypeInternal;
extern ListOrdersResponseDefaultTypeInternal _ListOrdersResponse_default_instance_;
class OrderItem;
struct OrderItemDefaultTypeInternal;
extern OrderItemDefaultTypeInternal _OrderItem_default_instance_;
class OrderResponse;
struct OrderResponseDefaultTypeInternal;
extern OrderResponseDefaultTypeInternal _OrderResponse_default_instance_;
}  // namespace orders
PROTOBUF_NAMESPACE_OPEN
template<> ::orders::CreateOrderRequest* Arena::CreateMaybeMessage<::orders::CreateOrderRequest>(Arena*);
template<> ::orders::GetOrderRequest* Arena::CreateMaybeMessage<::orders::GetOrderRequest>(Arena*);
template<> ::orders::ListOrdersRequest* Arena::CreateMaybeMessage<::orders::ListOrdersRequest>(Arena*);
template<> ::orders::ListOrdersResponse* Arena::CreateMaybeMessage<::orders::ListOrdersResponse>(Arena*);
template<> ::orders::OrderItem* Arena::CreateMaybeMessage<::orders::OrderItem>(Arena*);
template<> ::orders::OrderResponse* Arena::CreateMaybeMessage<::orders::OrderResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace orders {

// ===================================================================

class OrderItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orders.OrderItem) */ {
 public:
  inline OrderItem() : OrderItem(nullptr) {}
  ~OrderItem() override;
  explicit PROTOBUF_CONSTEXPR OrderItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderItem(const OrderItem& from);
  OrderItem(OrderItem&& from) noexcept
    : OrderItem() {
    *this = ::std::move(from);
  }

  inline OrderItem& operator=(const OrderItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderItem& operator=(OrderItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderItem* internal_default_instance() {
    return reinterpret_cast<const OrderItem*>(
               &_OrderItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderItem& a, OrderItem& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderItem& from) {
    OrderItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orders.OrderItem";
  }
  protected:
  explicit OrderItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookIdFieldNumber = 1,
    kUnitPriceFieldNumber = 3,
    kQuantityFieldNumber = 2,
  };
  // string book_id = 1;
  void clear_book_id();
  const std::string& book_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_book_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_book_id();
  PROTOBUF_NODISCARD std::string* release_book_id();
  void set_allocated_book_id(std::string* book_id);
  private:
  const std::string& _internal_book_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_book_id(const std::string& value);
  std::string* _internal_mutable_book_id();
  public:

  // double unit_price = 3;
  void clear_unit_price();
  double unit_price() const;
  void set_unit_price(double value);
  private:
  double _internal_unit_price() const;
  void _internal_set_unit_price(double value);
  public:

  // int32 quantity = 2;
  void clear_quantity();
  int32_t quantity() const;
  void set_quantity(int32_t value);
  private:
  int32_t _internal_quantity() const;
  void _internal_set_quantity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:orders.OrderItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr book_id_;
    double unit_price_;
    int32_t quantity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orders.CreateOrderRequest) */ {
 public:
  inline CreateOrderRequest() : CreateOrderRequest(nullptr) {}
  ~CreateOrderRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateOrderRequest(const CreateOrderRequest& from);
  CreateOrderRequest(CreateOrderRequest&& from) noexcept
    : CreateOrderRequest() {
    *this = ::std::move(from);
  }

  inline CreateOrderRequest& operator=(const CreateOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrderRequest& operator=(CreateOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateOrderRequest* internal_default_instance() {
    return reinterpret_cast<const CreateOrderRequest*>(
               &_CreateOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateOrderRequest& a, CreateOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateOrderRequest& from) {
    CreateOrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orders.CreateOrderRequest";
  }
  protected:
  explicit CreateOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kShippingAddressFieldNumber = 3,
  };
  // repeated .orders.OrderItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::orders::OrderItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderItem >*
      mutable_items();
  private:
  const ::orders::OrderItem& _internal_items(int index) const;
  ::orders::OrderItem* _internal_add_items();
  public:
  const ::orders::OrderItem& items(int index) const;
  ::orders::OrderItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderItem >&
      items() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string shipping_address = 3;
  void clear_shipping_address();
  const std::string& shipping_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shipping_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shipping_address();
  PROTOBUF_NODISCARD std::string* release_shipping_address();
  void set_allocated_shipping_address(std::string* shipping_address);
  private:
  const std::string& _internal_shipping_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shipping_address(const std::string& value);
  std::string* _internal_mutable_shipping_address();
  public:

  // @@protoc_insertion_point(class_scope:orders.CreateOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderItem > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shipping_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orders.GetOrderRequest) */ {
 public:
  inline GetOrderRequest() : GetOrderRequest(nullptr) {}
  ~GetOrderRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrderRequest(const GetOrderRequest& from);
  GetOrderRequest(GetOrderRequest&& from) noexcept
    : GetOrderRequest() {
    *this = ::std::move(from);
  }

  inline GetOrderRequest& operator=(const GetOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrderRequest& operator=(GetOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrderRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrderRequest*>(
               &_GetOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetOrderRequest& a, GetOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrderRequest& from) {
    GetOrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orders.GetOrderRequest";
  }
  protected:
  explicit GetOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // @@protoc_insertion_point(class_scope:orders.GetOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListOrdersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orders.ListOrdersRequest) */ {
 public:
  inline ListOrdersRequest() : ListOrdersRequest(nullptr) {}
  ~ListOrdersRequest() override;
  explicit PROTOBUF_CONSTEXPR ListOrdersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListOrdersRequest(const ListOrdersRequest& from);
  ListOrdersRequest(ListOrdersRequest&& from) noexcept
    : ListOrdersRequest() {
    *this = ::std::move(from);
  }

  inline ListOrdersRequest& operator=(const ListOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrdersRequest& operator=(ListOrdersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListOrdersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const ListOrdersRequest*>(
               &_ListOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListOrdersRequest& a, ListOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrdersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListOrdersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListOrdersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListOrdersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListOrdersRequest& from) {
    ListOrdersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrdersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orders.ListOrdersRequest";
  }
  protected:
  explicit ListOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int32 page = 2;
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:orders.ListOrdersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    int32_t page_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orders.OrderResponse) */ {
 public:
  inline OrderResponse() : OrderResponse(nullptr) {}
  ~OrderResponse() override;
  explicit PROTOBUF_CONSTEXPR OrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderResponse(const OrderResponse& from);
  OrderResponse(OrderResponse&& from) noexcept
    : OrderResponse() {
    *this = ::std::move(from);
  }

  inline OrderResponse& operator=(const OrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderResponse& operator=(OrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderResponse* internal_default_instance() {
    return reinterpret_cast<const OrderResponse*>(
               &_OrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OrderResponse& a, OrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderResponse& from) {
    OrderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orders.OrderResponse";
  }
  protected:
  explicit OrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kOrderIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kShippingAddressFieldNumber = 5,
    kStatusFieldNumber = 6,
    kCreatedAtFieldNumber = 7,
    kTotalAmountFieldNumber = 4,
  };
  // repeated .orders.OrderItem items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::orders::OrderItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderItem >*
      mutable_items();
  private:
  const ::orders::OrderItem& _internal_items(int index) const;
  ::orders::OrderItem* _internal_add_items();
  public:
  const ::orders::OrderItem& items(int index) const;
  ::orders::OrderItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderItem >&
      items() const;

  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string shipping_address = 5;
  void clear_shipping_address();
  const std::string& shipping_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shipping_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shipping_address();
  PROTOBUF_NODISCARD std::string* release_shipping_address();
  void set_allocated_shipping_address(std::string* shipping_address);
  private:
  const std::string& _internal_shipping_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shipping_address(const std::string& value);
  std::string* _internal_mutable_shipping_address();
  public:

  // string status = 6;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string created_at = 7;
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // double total_amount = 4;
  void clear_total_amount();
  double total_amount() const;
  void set_total_amount(double value);
  private:
  double _internal_total_amount() const;
  void _internal_set_total_amount(double value);
  public:

  // @@protoc_insertion_point(class_scope:orders.OrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderItem > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shipping_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
    double total_amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListOrdersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orders.ListOrdersResponse) */ {
 public:
  inline ListOrdersResponse() : ListOrdersResponse(nullptr) {}
  ~ListOrdersResponse() override;
  explicit PROTOBUF_CONSTEXPR ListOrdersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListOrdersResponse(const ListOrdersResponse& from);
  ListOrdersResponse(ListOrdersResponse&& from) noexcept
    : ListOrdersResponse() {
    *this = ::std::move(from);
  }

  inline ListOrdersResponse& operator=(const ListOrdersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrdersResponse& operator=(ListOrdersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListOrdersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListOrdersResponse* internal_default_instance() {
    return reinterpret_cast<const ListOrdersResponse*>(
               &_ListOrdersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListOrdersResponse& a, ListOrdersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrdersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListOrdersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListOrdersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListOrdersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListOrdersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListOrdersResponse& from) {
    ListOrdersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrdersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orders.ListOrdersResponse";
  }
  protected:
  explicit ListOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
    kTotalOrdersFieldNumber = 2,
  };
  // repeated .orders.OrderResponse orders = 1;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::orders::OrderResponse* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderResponse >*
      mutable_orders();
  private:
  const ::orders::OrderResponse& _internal_orders(int index) const;
  ::orders::OrderResponse* _internal_add_orders();
  public:
  const ::orders::OrderResponse& orders(int index) const;
  ::orders::OrderResponse* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderResponse >&
      orders() const;

  // int32 total_orders = 2;
  void clear_total_orders();
  int32_t total_orders() const;
  void set_total_orders(int32_t value);
  private:
  int32_t _internal_total_orders() const;
  void _internal_set_total_orders(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:orders.ListOrdersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderResponse > orders_;
    int32_t total_orders_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_orders_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderItem

// string book_id = 1;
inline void OrderItem::clear_book_id() {
  _impl_.book_id_.ClearToEmpty();
}
inline const std::string& OrderItem::book_id() const {
  // @@protoc_insertion_point(field_get:orders.OrderItem.book_id)
  return _internal_book_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderItem::set_book_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.book_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orders.OrderItem.book_id)
}
inline std::string* OrderItem::mutable_book_id() {
  std::string* _s = _internal_mutable_book_id();
  // @@protoc_insertion_point(field_mutable:orders.OrderItem.book_id)
  return _s;
}
inline const std::string& OrderItem::_internal_book_id() const {
  return _impl_.book_id_.Get();
}
inline void OrderItem::_internal_set_book_id(const std::string& value) {
  
  _impl_.book_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderItem::_internal_mutable_book_id() {
  
  return _impl_.book_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderItem::release_book_id() {
  // @@protoc_insertion_point(field_release:orders.OrderItem.book_id)
  return _impl_.book_id_.Release();
}
inline void OrderItem::set_allocated_book_id(std::string* book_id) {
  if (book_id != nullptr) {
    
  } else {
    
  }
  _impl_.book_id_.SetAllocated(book_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.book_id_.IsDefault()) {
    _impl_.book_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orders.OrderItem.book_id)
}

// int32 quantity = 2;
inline void OrderItem::clear_quantity() {
  _impl_.quantity_ = 0;
}
inline int32_t OrderItem::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int32_t OrderItem::quantity() const {
  // @@protoc_insertion_point(field_get:orders.OrderItem.quantity)
  return _internal_quantity();
}
inline void OrderItem::_internal_set_quantity(int32_t value) {
  
  _impl_.quantity_ = value;
}
inline void OrderItem::set_quantity(int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:orders.OrderItem.quantity)
}

// double unit_price = 3;
inline void OrderItem::clear_unit_price() {
  _impl_.unit_price_ = 0;
}
inline double OrderItem::_internal_unit_price() const {
  return _impl_.unit_price_;
}
inline double OrderItem::unit_price() const {
  // @@protoc_insertion_point(field_get:orders.OrderItem.unit_price)
  return _internal_unit_price();
}
inline void OrderItem::_internal_set_unit_price(double value) {
  
  _impl_.unit_price_ = value;
}
inline void OrderItem::set_unit_price(double value) {
  _internal_set_unit_price(value);
  // @@protoc_insertion_point(field_set:orders.OrderItem.unit_price)
}

// -------------------------------------------------------------------

// CreateOrderRequest

// string user_id = 1;
inline void CreateOrderRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& CreateOrderRequest::user_id() const {
  // @@protoc_insertion_point(field_get:orders.CreateOrderRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrderRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orders.CreateOrderRequest.user_id)
}
inline std::string* CreateOrderRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:orders.CreateOrderRequest.user_id)
  return _s;
}
inline const std::string& CreateOrderRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void CreateOrderRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateOrderRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateOrderRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:orders.CreateOrderRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void CreateOrderRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orders.CreateOrderRequest.user_id)
}

// repeated .orders.OrderItem items = 2;
inline int CreateOrderRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CreateOrderRequest::items_size() const {
  return _internal_items_size();
}
inline void CreateOrderRequest::clear_items() {
  _impl_.items_.Clear();
}
inline ::orders::OrderItem* CreateOrderRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:orders.CreateOrderRequest.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderItem >*
CreateOrderRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:orders.CreateOrderRequest.items)
  return &_impl_.items_;
}
inline const ::orders::OrderItem& CreateOrderRequest::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::orders::OrderItem& CreateOrderRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:orders.CreateOrderRequest.items)
  return _internal_items(index);
}
inline ::orders::OrderItem* CreateOrderRequest::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::orders::OrderItem* CreateOrderRequest::add_items() {
  ::orders::OrderItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:orders.CreateOrderRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderItem >&
CreateOrderRequest::items() const {
  // @@protoc_insertion_point(field_list:orders.CreateOrderRequest.items)
  return _impl_.items_;
}

// string shipping_address = 3;
inline void CreateOrderRequest::clear_shipping_address() {
  _impl_.shipping_address_.ClearToEmpty();
}
inline const std::string& CreateOrderRequest::shipping_address() const {
  // @@protoc_insertion_point(field_get:orders.CreateOrderRequest.shipping_address)
  return _internal_shipping_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrderRequest::set_shipping_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.shipping_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orders.CreateOrderRequest.shipping_address)
}
inline std::string* CreateOrderRequest::mutable_shipping_address() {
  std::string* _s = _internal_mutable_shipping_address();
  // @@protoc_insertion_point(field_mutable:orders.CreateOrderRequest.shipping_address)
  return _s;
}
inline const std::string& CreateOrderRequest::_internal_shipping_address() const {
  return _impl_.shipping_address_.Get();
}
inline void CreateOrderRequest::_internal_set_shipping_address(const std::string& value) {
  
  _impl_.shipping_address_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateOrderRequest::_internal_mutable_shipping_address() {
  
  return _impl_.shipping_address_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateOrderRequest::release_shipping_address() {
  // @@protoc_insertion_point(field_release:orders.CreateOrderRequest.shipping_address)
  return _impl_.shipping_address_.Release();
}
inline void CreateOrderRequest::set_allocated_shipping_address(std::string* shipping_address) {
  if (shipping_address != nullptr) {
    
  } else {
    
  }
  _impl_.shipping_address_.SetAllocated(shipping_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shipping_address_.IsDefault()) {
    _impl_.shipping_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orders.CreateOrderRequest.shipping_address)
}

// -------------------------------------------------------------------

// GetOrderRequest

// string order_id = 1;
inline void GetOrderRequest::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& GetOrderRequest::order_id() const {
  // @@protoc_insertion_point(field_get:orders.GetOrderRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrderRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orders.GetOrderRequest.order_id)
}
inline std::string* GetOrderRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:orders.GetOrderRequest.order_id)
  return _s;
}
inline const std::string& GetOrderRequest::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void GetOrderRequest::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOrderRequest::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOrderRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:orders.GetOrderRequest.order_id)
  return _impl_.order_id_.Release();
}
inline void GetOrderRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orders.GetOrderRequest.order_id)
}

// -------------------------------------------------------------------

// ListOrdersRequest

// string user_id = 1;
inline void ListOrdersRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& ListOrdersRequest::user_id() const {
  // @@protoc_insertion_point(field_get:orders.ListOrdersRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListOrdersRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orders.ListOrdersRequest.user_id)
}
inline std::string* ListOrdersRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:orders.ListOrdersRequest.user_id)
  return _s;
}
inline const std::string& ListOrdersRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void ListOrdersRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListOrdersRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ListOrdersRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:orders.ListOrdersRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void ListOrdersRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orders.ListOrdersRequest.user_id)
}

// int32 page = 2;
inline void ListOrdersRequest::clear_page() {
  _impl_.page_ = 0;
}
inline int32_t ListOrdersRequest::_internal_page() const {
  return _impl_.page_;
}
inline int32_t ListOrdersRequest::page() const {
  // @@protoc_insertion_point(field_get:orders.ListOrdersRequest.page)
  return _internal_page();
}
inline void ListOrdersRequest::_internal_set_page(int32_t value) {
  
  _impl_.page_ = value;
}
inline void ListOrdersRequest::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:orders.ListOrdersRequest.page)
}

// int32 page_size = 3;
inline void ListOrdersRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListOrdersRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListOrdersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:orders.ListOrdersRequest.page_size)
  return _internal_page_size();
}
inline void ListOrdersRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListOrdersRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:orders.ListOrdersRequest.page_size)
}

// -------------------------------------------------------------------

// OrderResponse

// string order_id = 1;
inline void OrderResponse::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& OrderResponse::order_id() const {
  // @@protoc_insertion_point(field_get:orders.OrderResponse.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orders.OrderResponse.order_id)
}
inline std::string* OrderResponse::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:orders.OrderResponse.order_id)
  return _s;
}
inline const std::string& OrderResponse::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void OrderResponse::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderResponse::release_order_id() {
  // @@protoc_insertion_point(field_release:orders.OrderResponse.order_id)
  return _impl_.order_id_.Release();
}
inline void OrderResponse::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orders.OrderResponse.order_id)
}

// string user_id = 2;
inline void OrderResponse::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& OrderResponse::user_id() const {
  // @@protoc_insertion_point(field_get:orders.OrderResponse.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orders.OrderResponse.user_id)
}
inline std::string* OrderResponse::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:orders.OrderResponse.user_id)
  return _s;
}
inline const std::string& OrderResponse::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void OrderResponse::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:orders.OrderResponse.user_id)
  return _impl_.user_id_.Release();
}
inline void OrderResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orders.OrderResponse.user_id)
}

// repeated .orders.OrderItem items = 3;
inline int OrderResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int OrderResponse::items_size() const {
  return _internal_items_size();
}
inline void OrderResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::orders::OrderItem* OrderResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:orders.OrderResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderItem >*
OrderResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:orders.OrderResponse.items)
  return &_impl_.items_;
}
inline const ::orders::OrderItem& OrderResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::orders::OrderItem& OrderResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:orders.OrderResponse.items)
  return _internal_items(index);
}
inline ::orders::OrderItem* OrderResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::orders::OrderItem* OrderResponse::add_items() {
  ::orders::OrderItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:orders.OrderResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderItem >&
OrderResponse::items() const {
  // @@protoc_insertion_point(field_list:orders.OrderResponse.items)
  return _impl_.items_;
}

// double total_amount = 4;
inline void OrderResponse::clear_total_amount() {
  _impl_.total_amount_ = 0;
}
inline double OrderResponse::_internal_total_amount() const {
  return _impl_.total_amount_;
}
inline double OrderResponse::total_amount() const {
  // @@protoc_insertion_point(field_get:orders.OrderResponse.total_amount)
  return _internal_total_amount();
}
inline void OrderResponse::_internal_set_total_amount(double value) {
  
  _impl_.total_amount_ = value;
}
inline void OrderResponse::set_total_amount(double value) {
  _internal_set_total_amount(value);
  // @@protoc_insertion_point(field_set:orders.OrderResponse.total_amount)
}

// string shipping_address = 5;
inline void OrderResponse::clear_shipping_address() {
  _impl_.shipping_address_.ClearToEmpty();
}
inline const std::string& OrderResponse::shipping_address() const {
  // @@protoc_insertion_point(field_get:orders.OrderResponse.shipping_address)
  return _internal_shipping_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_shipping_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.shipping_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orders.OrderResponse.shipping_address)
}
inline std::string* OrderResponse::mutable_shipping_address() {
  std::string* _s = _internal_mutable_shipping_address();
  // @@protoc_insertion_point(field_mutable:orders.OrderResponse.shipping_address)
  return _s;
}
inline const std::string& OrderResponse::_internal_shipping_address() const {
  return _impl_.shipping_address_.Get();
}
inline void OrderResponse::_internal_set_shipping_address(const std::string& value) {
  
  _impl_.shipping_address_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_shipping_address() {
  
  return _impl_.shipping_address_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderResponse::release_shipping_address() {
  // @@protoc_insertion_point(field_release:orders.OrderResponse.shipping_address)
  return _impl_.shipping_address_.Release();
}
inline void OrderResponse::set_allocated_shipping_address(std::string* shipping_address) {
  if (shipping_address != nullptr) {
    
  } else {
    
  }
  _impl_.shipping_address_.SetAllocated(shipping_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shipping_address_.IsDefault()) {
    _impl_.shipping_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orders.OrderResponse.shipping_address)
}

// string status = 6;
inline void OrderResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& OrderResponse::status() const {
  // @@protoc_insertion_point(field_get:orders.OrderResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orders.OrderResponse.status)
}
inline std::string* OrderResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:orders.OrderResponse.status)
  return _s;
}
inline const std::string& OrderResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void OrderResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderResponse::release_status() {
  // @@protoc_insertion_point(field_release:orders.OrderResponse.status)
  return _impl_.status_.Release();
}
inline void OrderResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orders.OrderResponse.status)
}

// string created_at = 7;
inline void OrderResponse::clear_created_at() {
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& OrderResponse::created_at() const {
  // @@protoc_insertion_point(field_get:orders.OrderResponse.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 _impl_.created_at_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orders.OrderResponse.created_at)
}
inline std::string* OrderResponse::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:orders.OrderResponse.created_at)
  return _s;
}
inline const std::string& OrderResponse::_internal_created_at() const {
  return _impl_.created_at_.Get();
}
inline void OrderResponse::_internal_set_created_at(const std::string& value) {
  
  _impl_.created_at_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_created_at() {
  
  return _impl_.created_at_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderResponse::release_created_at() {
  // @@protoc_insertion_point(field_release:orders.OrderResponse.created_at)
  return _impl_.created_at_.Release();
}
inline void OrderResponse::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  _impl_.created_at_.SetAllocated(created_at, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orders.OrderResponse.created_at)
}

// -------------------------------------------------------------------

// ListOrdersResponse

// repeated .orders.OrderResponse orders = 1;
inline int ListOrdersResponse::_internal_orders_size() const {
  return _impl_.orders_.size();
}
inline int ListOrdersResponse::orders_size() const {
  return _internal_orders_size();
}
inline void ListOrdersResponse::clear_orders() {
  _impl_.orders_.Clear();
}
inline ::orders::OrderResponse* ListOrdersResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:orders.ListOrdersResponse.orders)
  return _impl_.orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderResponse >*
ListOrdersResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:orders.ListOrdersResponse.orders)
  return &_impl_.orders_;
}
inline const ::orders::OrderResponse& ListOrdersResponse::_internal_orders(int index) const {
  return _impl_.orders_.Get(index);
}
inline const ::orders::OrderResponse& ListOrdersResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:orders.ListOrdersResponse.orders)
  return _internal_orders(index);
}
inline ::orders::OrderResponse* ListOrdersResponse::_internal_add_orders() {
  return _impl_.orders_.Add();
}
inline ::orders::OrderResponse* ListOrdersResponse::add_orders() {
  ::orders::OrderResponse* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:orders.ListOrdersResponse.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orders::OrderResponse >&
ListOrdersResponse::orders() const {
  // @@protoc_insertion_point(field_list:orders.ListOrdersResponse.orders)
  return _impl_.orders_;
}

// int32 total_orders = 2;
inline void ListOrdersResponse::clear_total_orders() {
  _impl_.total_orders_ = 0;
}
inline int32_t ListOrdersResponse::_internal_total_orders() const {
  return _impl_.total_orders_;
}
inline int32_t ListOrdersResponse::total_orders() const {
  // @@protoc_insertion_point(field_get:orders.ListOrdersResponse.total_orders)
  return _internal_total_orders();
}
inline void ListOrdersResponse::_internal_set_total_orders(int32_t value) {
  
  _impl_.total_orders_ = value;
}
inline void ListOrdersResponse::set_total_orders(int32_t value) {
  _internal_set_total_orders(value);
  // @@protoc_insertion_point(field_set:orders.ListOrdersResponse.total_orders)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace orders

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_orders_5fservice_2eproto
