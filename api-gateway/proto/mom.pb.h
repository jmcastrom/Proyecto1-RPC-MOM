// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mom_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mom_2eproto;
namespace mom {
class AuthRequest;
struct AuthRequestDefaultTypeInternal;
extern AuthRequestDefaultTypeInternal _AuthRequest_default_instance_;
class AuthResponse;
struct AuthResponseDefaultTypeInternal;
extern AuthResponseDefaultTypeInternal _AuthResponse_default_instance_;
class Book;
struct BookDefaultTypeInternal;
extern BookDefaultTypeInternal _Book_default_instance_;
class BookRequest;
struct BookRequestDefaultTypeInternal;
extern BookRequestDefaultTypeInternal _BookRequest_default_instance_;
class BookResponse;
struct BookResponseDefaultTypeInternal;
extern BookResponseDefaultTypeInternal _BookResponse_default_instance_;
class CreateOrderRequest;
struct CreateOrderRequestDefaultTypeInternal;
extern CreateOrderRequestDefaultTypeInternal _CreateOrderRequest_default_instance_;
class GetOrderRequest;
struct GetOrderRequestDefaultTypeInternal;
extern GetOrderRequestDefaultTypeInternal _GetOrderRequest_default_instance_;
class GetUserRequest;
struct GetUserRequestDefaultTypeInternal;
extern GetUserRequestDefaultTypeInternal _GetUserRequest_default_instance_;
class ListOrdersRequest;
struct ListOrdersRequestDefaultTypeInternal;
extern ListOrdersRequestDefaultTypeInternal _ListOrdersRequest_default_instance_;
class ListOrdersResponse;
struct ListOrdersResponseDefaultTypeInternal;
extern ListOrdersResponseDefaultTypeInternal _ListOrdersResponse_default_instance_;
class OrderIdRequest;
struct OrderIdRequestDefaultTypeInternal;
extern OrderIdRequestDefaultTypeInternal _OrderIdRequest_default_instance_;
class OrderItem;
struct OrderItemDefaultTypeInternal;
extern OrderItemDefaultTypeInternal _OrderItem_default_instance_;
class OrderResponse;
struct OrderResponseDefaultTypeInternal;
extern OrderResponseDefaultTypeInternal _OrderResponse_default_instance_;
class OrdersList;
struct OrdersListDefaultTypeInternal;
extern OrdersListDefaultTypeInternal _OrdersList_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
struct SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class UpdateStockRequest;
struct UpdateStockRequestDefaultTypeInternal;
extern UpdateStockRequestDefaultTypeInternal _UpdateStockRequest_default_instance_;
class UpdateStockResponse;
struct UpdateStockResponseDefaultTypeInternal;
extern UpdateStockResponseDefaultTypeInternal _UpdateStockResponse_default_instance_;
class UpdateUserRequest;
struct UpdateUserRequestDefaultTypeInternal;
extern UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
class UserIdRequest;
struct UserIdRequestDefaultTypeInternal;
extern UserIdRequestDefaultTypeInternal _UserIdRequest_default_instance_;
class UserResponse;
struct UserResponseDefaultTypeInternal;
extern UserResponseDefaultTypeInternal _UserResponse_default_instance_;
}  // namespace mom
PROTOBUF_NAMESPACE_OPEN
template<> ::mom::AuthRequest* Arena::CreateMaybeMessage<::mom::AuthRequest>(Arena*);
template<> ::mom::AuthResponse* Arena::CreateMaybeMessage<::mom::AuthResponse>(Arena*);
template<> ::mom::Book* Arena::CreateMaybeMessage<::mom::Book>(Arena*);
template<> ::mom::BookRequest* Arena::CreateMaybeMessage<::mom::BookRequest>(Arena*);
template<> ::mom::BookResponse* Arena::CreateMaybeMessage<::mom::BookResponse>(Arena*);
template<> ::mom::CreateOrderRequest* Arena::CreateMaybeMessage<::mom::CreateOrderRequest>(Arena*);
template<> ::mom::GetOrderRequest* Arena::CreateMaybeMessage<::mom::GetOrderRequest>(Arena*);
template<> ::mom::GetUserRequest* Arena::CreateMaybeMessage<::mom::GetUserRequest>(Arena*);
template<> ::mom::ListOrdersRequest* Arena::CreateMaybeMessage<::mom::ListOrdersRequest>(Arena*);
template<> ::mom::ListOrdersResponse* Arena::CreateMaybeMessage<::mom::ListOrdersResponse>(Arena*);
template<> ::mom::OrderIdRequest* Arena::CreateMaybeMessage<::mom::OrderIdRequest>(Arena*);
template<> ::mom::OrderItem* Arena::CreateMaybeMessage<::mom::OrderItem>(Arena*);
template<> ::mom::OrderResponse* Arena::CreateMaybeMessage<::mom::OrderResponse>(Arena*);
template<> ::mom::OrdersList* Arena::CreateMaybeMessage<::mom::OrdersList>(Arena*);
template<> ::mom::RegisterRequest* Arena::CreateMaybeMessage<::mom::RegisterRequest>(Arena*);
template<> ::mom::SearchRequest* Arena::CreateMaybeMessage<::mom::SearchRequest>(Arena*);
template<> ::mom::SearchResponse* Arena::CreateMaybeMessage<::mom::SearchResponse>(Arena*);
template<> ::mom::UpdateStockRequest* Arena::CreateMaybeMessage<::mom::UpdateStockRequest>(Arena*);
template<> ::mom::UpdateStockResponse* Arena::CreateMaybeMessage<::mom::UpdateStockResponse>(Arena*);
template<> ::mom::UpdateUserRequest* Arena::CreateMaybeMessage<::mom::UpdateUserRequest>(Arena*);
template<> ::mom::UserIdRequest* Arena::CreateMaybeMessage<::mom::UserIdRequest>(Arena*);
template<> ::mom::UserResponse* Arena::CreateMaybeMessage<::mom::UserResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mom {

// ===================================================================

class Book final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.Book) */ {
 public:
  inline Book() : Book(nullptr) {}
  ~Book() override;
  explicit PROTOBUF_CONSTEXPR Book(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Book(const Book& from);
  Book(Book&& from) noexcept
    : Book() {
    *this = ::std::move(from);
  }

  inline Book& operator=(const Book& from) {
    CopyFrom(from);
    return *this;
  }
  inline Book& operator=(Book&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Book& default_instance() {
    return *internal_default_instance();
  }
  static inline const Book* internal_default_instance() {
    return reinterpret_cast<const Book*>(
               &_Book_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Book& a, Book& b) {
    a.Swap(&b);
  }
  inline void Swap(Book* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Book* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Book* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Book>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Book& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Book& from) {
    Book::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Book* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.Book";
  }
  protected:
  explicit Book(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kAuthorFieldNumber = 3,
    kIsbnFieldNumber = 4,
    kPriceFieldNumber = 6,
    kStockFieldNumber = 5,
  };
  // string book_id = 1;
  void clear_book_id();
  const std::string& book_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_book_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_book_id();
  PROTOBUF_NODISCARD std::string* release_book_id();
  void set_allocated_book_id(std::string* book_id);
  private:
  const std::string& _internal_book_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_book_id(const std::string& value);
  std::string* _internal_mutable_book_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string author = 3;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // string isbn = 4;
  void clear_isbn();
  const std::string& isbn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_isbn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_isbn();
  PROTOBUF_NODISCARD std::string* release_isbn();
  void set_allocated_isbn(std::string* isbn);
  private:
  const std::string& _internal_isbn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isbn(const std::string& value);
  std::string* _internal_mutable_isbn();
  public:

  // double price = 6;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 stock = 5;
  void clear_stock();
  int32_t stock() const;
  void set_stock(int32_t value);
  private:
  int32_t _internal_stock() const;
  void _internal_set_stock(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mom.Book)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr book_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isbn_;
    double price_;
    int32_t stock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class BookRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.BookRequest) */ {
 public:
  inline BookRequest() : BookRequest(nullptr) {}
  ~BookRequest() override;
  explicit PROTOBUF_CONSTEXPR BookRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookRequest(const BookRequest& from);
  BookRequest(BookRequest&& from) noexcept
    : BookRequest() {
    *this = ::std::move(from);
  }

  inline BookRequest& operator=(const BookRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookRequest& operator=(BookRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookRequest* internal_default_instance() {
    return reinterpret_cast<const BookRequest*>(
               &_BookRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BookRequest& a, BookRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BookRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookRequest& from) {
    BookRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.BookRequest";
  }
  protected:
  explicit BookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookIdFieldNumber = 1,
  };
  // string book_id = 1;
  void clear_book_id();
  const std::string& book_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_book_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_book_id();
  PROTOBUF_NODISCARD std::string* release_book_id();
  void set_allocated_book_id(std::string* book_id);
  private:
  const std::string& _internal_book_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_book_id(const std::string& value);
  std::string* _internal_mutable_book_id();
  public:

  // @@protoc_insertion_point(class_scope:mom.BookRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr book_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class BookResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.BookResponse) */ {
 public:
  inline BookResponse() : BookResponse(nullptr) {}
  ~BookResponse() override;
  explicit PROTOBUF_CONSTEXPR BookResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookResponse(const BookResponse& from);
  BookResponse(BookResponse&& from) noexcept
    : BookResponse() {
    *this = ::std::move(from);
  }

  inline BookResponse& operator=(const BookResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookResponse& operator=(BookResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookResponse* internal_default_instance() {
    return reinterpret_cast<const BookResponse*>(
               &_BookResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BookResponse& a, BookResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BookResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookResponse& from) {
    BookResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.BookResponse";
  }
  protected:
  explicit BookResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kAuthorFieldNumber = 3,
    kIsbnFieldNumber = 4,
    kPriceFieldNumber = 6,
    kStockFieldNumber = 5,
  };
  // string book_id = 1;
  void clear_book_id();
  const std::string& book_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_book_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_book_id();
  PROTOBUF_NODISCARD std::string* release_book_id();
  void set_allocated_book_id(std::string* book_id);
  private:
  const std::string& _internal_book_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_book_id(const std::string& value);
  std::string* _internal_mutable_book_id();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string author = 3;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // string isbn = 4;
  void clear_isbn();
  const std::string& isbn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_isbn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_isbn();
  PROTOBUF_NODISCARD std::string* release_isbn();
  void set_allocated_isbn(std::string* isbn);
  private:
  const std::string& _internal_isbn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isbn(const std::string& value);
  std::string* _internal_mutable_isbn();
  public:

  // double price = 6;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 stock = 5;
  void clear_stock();
  int32_t stock() const;
  void set_stock(int32_t value);
  private:
  int32_t _internal_stock() const;
  void _internal_set_stock(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mom.BookResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr book_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isbn_;
    double price_;
    int32_t stock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchRequest& from) {
    SearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kPageFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // int32 page = 2;
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mom.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    int32_t page_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {}
  ~SearchResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchResponse& from) {
    SearchResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBooksFieldNumber = 1,
    kTotalResultsFieldNumber = 2,
  };
  // repeated .mom.BookResponse books = 1;
  int books_size() const;
  private:
  int _internal_books_size() const;
  public:
  void clear_books();
  ::mom::BookResponse* mutable_books(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::BookResponse >*
      mutable_books();
  private:
  const ::mom::BookResponse& _internal_books(int index) const;
  ::mom::BookResponse* _internal_add_books();
  public:
  const ::mom::BookResponse& books(int index) const;
  ::mom::BookResponse* add_books();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::BookResponse >&
      books() const;

  // int32 total_results = 2;
  void clear_total_results();
  int32_t total_results() const;
  void set_total_results(int32_t value);
  private:
  int32_t _internal_total_results() const;
  void _internal_set_total_results(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mom.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::BookResponse > books_;
    int32_t total_results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class UpdateStockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.UpdateStockRequest) */ {
 public:
  inline UpdateStockRequest() : UpdateStockRequest(nullptr) {}
  ~UpdateStockRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateStockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateStockRequest(const UpdateStockRequest& from);
  UpdateStockRequest(UpdateStockRequest&& from) noexcept
    : UpdateStockRequest() {
    *this = ::std::move(from);
  }

  inline UpdateStockRequest& operator=(const UpdateStockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStockRequest& operator=(UpdateStockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateStockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateStockRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateStockRequest*>(
               &_UpdateStockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateStockRequest& a, UpdateStockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateStockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateStockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateStockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateStockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateStockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateStockRequest& from) {
    UpdateStockRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStockRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.UpdateStockRequest";
  }
  protected:
  explicit UpdateStockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookIdFieldNumber = 1,
    kQuantityChangeFieldNumber = 2,
  };
  // string book_id = 1;
  void clear_book_id();
  const std::string& book_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_book_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_book_id();
  PROTOBUF_NODISCARD std::string* release_book_id();
  void set_allocated_book_id(std::string* book_id);
  private:
  const std::string& _internal_book_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_book_id(const std::string& value);
  std::string* _internal_mutable_book_id();
  public:

  // int32 quantity_change = 2;
  void clear_quantity_change();
  int32_t quantity_change() const;
  void set_quantity_change(int32_t value);
  private:
  int32_t _internal_quantity_change() const;
  void _internal_set_quantity_change(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mom.UpdateStockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr book_id_;
    int32_t quantity_change_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class UpdateStockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.UpdateStockResponse) */ {
 public:
  inline UpdateStockResponse() : UpdateStockResponse(nullptr) {}
  ~UpdateStockResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateStockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateStockResponse(const UpdateStockResponse& from);
  UpdateStockResponse(UpdateStockResponse&& from) noexcept
    : UpdateStockResponse() {
    *this = ::std::move(from);
  }

  inline UpdateStockResponse& operator=(const UpdateStockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStockResponse& operator=(UpdateStockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateStockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateStockResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateStockResponse*>(
               &_UpdateStockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateStockResponse& a, UpdateStockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateStockResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateStockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateStockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateStockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateStockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateStockResponse& from) {
    UpdateStockResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStockResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.UpdateStockResponse";
  }
  protected:
  explicit UpdateStockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kNewStockFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 new_stock = 2;
  void clear_new_stock();
  int32_t new_stock() const;
  void set_new_stock(int32_t value);
  private:
  int32_t _internal_new_stock() const;
  void _internal_set_new_stock(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mom.UpdateStockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    int32_t new_stock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  ~RegisterRequest() override;
  explicit PROTOBUF_CONSTEXPR RegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterRequest& from) {
    RegisterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kEmailFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kFullNameFieldNumber = 4,
    kAddressFieldNumber = 5,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string full_name = 4;
  void clear_full_name();
  const std::string& full_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_name();
  PROTOBUF_NODISCARD std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // string address = 5;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:mom.RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class GetUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.GetUserRequest) */ {
 public:
  inline GetUserRequest() : GetUserRequest(nullptr) {}
  ~GetUserRequest() override;
  explicit PROTOBUF_CONSTEXPR GetUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserRequest(const GetUserRequest& from);
  GetUserRequest(GetUserRequest&& from) noexcept
    : GetUserRequest() {
    *this = ::std::move(from);
  }

  inline GetUserRequest& operator=(const GetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserRequest& operator=(GetUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserRequest*>(
               &_GetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetUserRequest& a, GetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserRequest& from) {
    GetUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.GetUserRequest";
  }
  protected:
  explicit GetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:mom.GetUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.UpdateUserRequest) */ {
 public:
  inline UpdateUserRequest() : UpdateUserRequest(nullptr) {}
  ~UpdateUserRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserRequest(const UpdateUserRequest& from);
  UpdateUserRequest(UpdateUserRequest&& from) noexcept
    : UpdateUserRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserRequest& operator=(const UpdateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserRequest& operator=(UpdateUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserRequest*>(
               &_UpdateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateUserRequest& a, UpdateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateUserRequest& from) {
    UpdateUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.UpdateUserRequest";
  }
  protected:
  explicit UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kEmailFieldNumber = 2,
    kFullNameFieldNumber = 3,
    kAddressFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string full_name = 3;
  void clear_full_name();
  const std::string& full_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_name();
  PROTOBUF_NODISCARD std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:mom.UpdateUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class AuthRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.AuthRequest) */ {
 public:
  inline AuthRequest() : AuthRequest(nullptr) {}
  ~AuthRequest() override;
  explicit PROTOBUF_CONSTEXPR AuthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthRequest(const AuthRequest& from);
  AuthRequest(AuthRequest&& from) noexcept
    : AuthRequest() {
    *this = ::std::move(from);
  }

  inline AuthRequest& operator=(const AuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRequest& operator=(AuthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRequest*>(
               &_AuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AuthRequest& a, AuthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthRequest& from) {
    AuthRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.AuthRequest";
  }
  protected:
  explicit AuthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:mom.AuthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class AuthResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.AuthResponse) */ {
 public:
  inline AuthResponse() : AuthResponse(nullptr) {}
  ~AuthResponse() override;
  explicit PROTOBUF_CONSTEXPR AuthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthResponse(const AuthResponse& from);
  AuthResponse(AuthResponse&& from) noexcept
    : AuthResponse() {
    *this = ::std::move(from);
  }

  inline AuthResponse& operator=(const AuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthResponse& operator=(AuthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthResponse* internal_default_instance() {
    return reinterpret_cast<const AuthResponse*>(
               &_AuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AuthResponse& a, AuthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthResponse& from) {
    AuthResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.AuthResponse";
  }
  protected:
  explicit AuthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kTokenFieldNumber = 3,
    kMessageFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mom.AuthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class UserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.UserResponse) */ {
 public:
  inline UserResponse() : UserResponse(nullptr) {}
  ~UserResponse() override;
  explicit PROTOBUF_CONSTEXPR UserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserResponse(const UserResponse& from);
  UserResponse(UserResponse&& from) noexcept
    : UserResponse() {
    *this = ::std::move(from);
  }

  inline UserResponse& operator=(const UserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserResponse& operator=(UserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserResponse* internal_default_instance() {
    return reinterpret_cast<const UserResponse*>(
               &_UserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UserResponse& a, UserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserResponse& from) {
    UserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.UserResponse";
  }
  protected:
  explicit UserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kFullNameFieldNumber = 4,
    kAddressFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string full_name = 4;
  void clear_full_name();
  const std::string& full_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_name();
  PROTOBUF_NODISCARD std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // string address = 5;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string created_at = 6;
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // @@protoc_insertion_point(class_scope:mom.UserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class OrderItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.OrderItem) */ {
 public:
  inline OrderItem() : OrderItem(nullptr) {}
  ~OrderItem() override;
  explicit PROTOBUF_CONSTEXPR OrderItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderItem(const OrderItem& from);
  OrderItem(OrderItem&& from) noexcept
    : OrderItem() {
    *this = ::std::move(from);
  }

  inline OrderItem& operator=(const OrderItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderItem& operator=(OrderItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderItem* internal_default_instance() {
    return reinterpret_cast<const OrderItem*>(
               &_OrderItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(OrderItem& a, OrderItem& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderItem& from) {
    OrderItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.OrderItem";
  }
  protected:
  explicit OrderItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookIdFieldNumber = 1,
    kUnitPriceFieldNumber = 3,
    kQuantityFieldNumber = 2,
  };
  // string book_id = 1;
  void clear_book_id();
  const std::string& book_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_book_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_book_id();
  PROTOBUF_NODISCARD std::string* release_book_id();
  void set_allocated_book_id(std::string* book_id);
  private:
  const std::string& _internal_book_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_book_id(const std::string& value);
  std::string* _internal_mutable_book_id();
  public:

  // double unit_price = 3;
  void clear_unit_price();
  double unit_price() const;
  void set_unit_price(double value);
  private:
  double _internal_unit_price() const;
  void _internal_set_unit_price(double value);
  public:

  // int32 quantity = 2;
  void clear_quantity();
  int32_t quantity() const;
  void set_quantity(int32_t value);
  private:
  int32_t _internal_quantity() const;
  void _internal_set_quantity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mom.OrderItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr book_id_;
    double unit_price_;
    int32_t quantity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class CreateOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.CreateOrderRequest) */ {
 public:
  inline CreateOrderRequest() : CreateOrderRequest(nullptr) {}
  ~CreateOrderRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateOrderRequest(const CreateOrderRequest& from);
  CreateOrderRequest(CreateOrderRequest&& from) noexcept
    : CreateOrderRequest() {
    *this = ::std::move(from);
  }

  inline CreateOrderRequest& operator=(const CreateOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrderRequest& operator=(CreateOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateOrderRequest* internal_default_instance() {
    return reinterpret_cast<const CreateOrderRequest*>(
               &_CreateOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CreateOrderRequest& a, CreateOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateOrderRequest& from) {
    CreateOrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.CreateOrderRequest";
  }
  protected:
  explicit CreateOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kShippingAddressFieldNumber = 3,
  };
  // repeated .mom.OrderItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::mom::OrderItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderItem >*
      mutable_items();
  private:
  const ::mom::OrderItem& _internal_items(int index) const;
  ::mom::OrderItem* _internal_add_items();
  public:
  const ::mom::OrderItem& items(int index) const;
  ::mom::OrderItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderItem >&
      items() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string shipping_address = 3;
  void clear_shipping_address();
  const std::string& shipping_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shipping_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shipping_address();
  PROTOBUF_NODISCARD std::string* release_shipping_address();
  void set_allocated_shipping_address(std::string* shipping_address);
  private:
  const std::string& _internal_shipping_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shipping_address(const std::string& value);
  std::string* _internal_mutable_shipping_address();
  public:

  // @@protoc_insertion_point(class_scope:mom.CreateOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderItem > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shipping_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class GetOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.GetOrderRequest) */ {
 public:
  inline GetOrderRequest() : GetOrderRequest(nullptr) {}
  ~GetOrderRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrderRequest(const GetOrderRequest& from);
  GetOrderRequest(GetOrderRequest&& from) noexcept
    : GetOrderRequest() {
    *this = ::std::move(from);
  }

  inline GetOrderRequest& operator=(const GetOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrderRequest& operator=(GetOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrderRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrderRequest*>(
               &_GetOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetOrderRequest& a, GetOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrderRequest& from) {
    GetOrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.GetOrderRequest";
  }
  protected:
  explicit GetOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // @@protoc_insertion_point(class_scope:mom.GetOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class ListOrdersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.ListOrdersRequest) */ {
 public:
  inline ListOrdersRequest() : ListOrdersRequest(nullptr) {}
  ~ListOrdersRequest() override;
  explicit PROTOBUF_CONSTEXPR ListOrdersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListOrdersRequest(const ListOrdersRequest& from);
  ListOrdersRequest(ListOrdersRequest&& from) noexcept
    : ListOrdersRequest() {
    *this = ::std::move(from);
  }

  inline ListOrdersRequest& operator=(const ListOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrdersRequest& operator=(ListOrdersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListOrdersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const ListOrdersRequest*>(
               &_ListOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListOrdersRequest& a, ListOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrdersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListOrdersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListOrdersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListOrdersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListOrdersRequest& from) {
    ListOrdersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrdersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.ListOrdersRequest";
  }
  protected:
  explicit ListOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kPageFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int32 page = 2;
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mom.ListOrdersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    int32_t page_;
    int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class OrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.OrderResponse) */ {
 public:
  inline OrderResponse() : OrderResponse(nullptr) {}
  ~OrderResponse() override;
  explicit PROTOBUF_CONSTEXPR OrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderResponse(const OrderResponse& from);
  OrderResponse(OrderResponse&& from) noexcept
    : OrderResponse() {
    *this = ::std::move(from);
  }

  inline OrderResponse& operator=(const OrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderResponse& operator=(OrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderResponse* internal_default_instance() {
    return reinterpret_cast<const OrderResponse*>(
               &_OrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(OrderResponse& a, OrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderResponse& from) {
    OrderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.OrderResponse";
  }
  protected:
  explicit OrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kOrderIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kShippingAddressFieldNumber = 5,
    kStatusFieldNumber = 6,
    kCreatedAtFieldNumber = 7,
    kTotalAmountFieldNumber = 4,
  };
  // repeated .mom.OrderItem items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::mom::OrderItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderItem >*
      mutable_items();
  private:
  const ::mom::OrderItem& _internal_items(int index) const;
  ::mom::OrderItem* _internal_add_items();
  public:
  const ::mom::OrderItem& items(int index) const;
  ::mom::OrderItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderItem >&
      items() const;

  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string shipping_address = 5;
  void clear_shipping_address();
  const std::string& shipping_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shipping_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shipping_address();
  PROTOBUF_NODISCARD std::string* release_shipping_address();
  void set_allocated_shipping_address(std::string* shipping_address);
  private:
  const std::string& _internal_shipping_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shipping_address(const std::string& value);
  std::string* _internal_mutable_shipping_address();
  public:

  // string status = 6;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string created_at = 7;
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // double total_amount = 4;
  void clear_total_amount();
  double total_amount() const;
  void set_total_amount(double value);
  private:
  double _internal_total_amount() const;
  void _internal_set_total_amount(double value);
  public:

  // @@protoc_insertion_point(class_scope:mom.OrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderItem > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shipping_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
    double total_amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class ListOrdersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.ListOrdersResponse) */ {
 public:
  inline ListOrdersResponse() : ListOrdersResponse(nullptr) {}
  ~ListOrdersResponse() override;
  explicit PROTOBUF_CONSTEXPR ListOrdersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListOrdersResponse(const ListOrdersResponse& from);
  ListOrdersResponse(ListOrdersResponse&& from) noexcept
    : ListOrdersResponse() {
    *this = ::std::move(from);
  }

  inline ListOrdersResponse& operator=(const ListOrdersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrdersResponse& operator=(ListOrdersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListOrdersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListOrdersResponse* internal_default_instance() {
    return reinterpret_cast<const ListOrdersResponse*>(
               &_ListOrdersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ListOrdersResponse& a, ListOrdersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrdersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListOrdersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListOrdersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListOrdersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListOrdersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListOrdersResponse& from) {
    ListOrdersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrdersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.ListOrdersResponse";
  }
  protected:
  explicit ListOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
    kTotalOrdersFieldNumber = 2,
  };
  // repeated .mom.OrderResponse orders = 1;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::mom::OrderResponse* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderResponse >*
      mutable_orders();
  private:
  const ::mom::OrderResponse& _internal_orders(int index) const;
  ::mom::OrderResponse* _internal_add_orders();
  public:
  const ::mom::OrderResponse& orders(int index) const;
  ::mom::OrderResponse* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderResponse >&
      orders() const;

  // int32 total_orders = 2;
  void clear_total_orders();
  int32_t total_orders() const;
  void set_total_orders(int32_t value);
  private:
  int32_t _internal_total_orders() const;
  void _internal_set_total_orders(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mom.ListOrdersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderResponse > orders_;
    int32_t total_orders_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class UserIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.UserIdRequest) */ {
 public:
  inline UserIdRequest() : UserIdRequest(nullptr) {}
  ~UserIdRequest() override;
  explicit PROTOBUF_CONSTEXPR UserIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserIdRequest(const UserIdRequest& from);
  UserIdRequest(UserIdRequest&& from) noexcept
    : UserIdRequest() {
    *this = ::std::move(from);
  }

  inline UserIdRequest& operator=(const UserIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserIdRequest& operator=(UserIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserIdRequest* internal_default_instance() {
    return reinterpret_cast<const UserIdRequest*>(
               &_UserIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UserIdRequest& a, UserIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserIdRequest& from) {
    UserIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.UserIdRequest";
  }
  protected:
  explicit UserIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:mom.UserIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class OrderIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.OrderIdRequest) */ {
 public:
  inline OrderIdRequest() : OrderIdRequest(nullptr) {}
  ~OrderIdRequest() override;
  explicit PROTOBUF_CONSTEXPR OrderIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderIdRequest(const OrderIdRequest& from);
  OrderIdRequest(OrderIdRequest&& from) noexcept
    : OrderIdRequest() {
    *this = ::std::move(from);
  }

  inline OrderIdRequest& operator=(const OrderIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderIdRequest& operator=(OrderIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderIdRequest* internal_default_instance() {
    return reinterpret_cast<const OrderIdRequest*>(
               &_OrderIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(OrderIdRequest& a, OrderIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderIdRequest& from) {
    OrderIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.OrderIdRequest";
  }
  protected:
  explicit OrderIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // @@protoc_insertion_point(class_scope:mom.OrderIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class OrdersList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mom.OrdersList) */ {
 public:
  inline OrdersList() : OrdersList(nullptr) {}
  ~OrdersList() override;
  explicit PROTOBUF_CONSTEXPR OrdersList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrdersList(const OrdersList& from);
  OrdersList(OrdersList&& from) noexcept
    : OrdersList() {
    *this = ::std::move(from);
  }

  inline OrdersList& operator=(const OrdersList& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersList& operator=(OrdersList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrdersList& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrdersList* internal_default_instance() {
    return reinterpret_cast<const OrdersList*>(
               &_OrdersList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(OrdersList& a, OrdersList& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrdersList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrdersList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrdersList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrdersList& from) {
    OrdersList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mom.OrdersList";
  }
  protected:
  explicit OrdersList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
    kTotalOrdersFieldNumber = 2,
  };
  // repeated .mom.OrderResponse orders = 1;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::mom::OrderResponse* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderResponse >*
      mutable_orders();
  private:
  const ::mom::OrderResponse& _internal_orders(int index) const;
  ::mom::OrderResponse* _internal_add_orders();
  public:
  const ::mom::OrderResponse& orders(int index) const;
  ::mom::OrderResponse* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderResponse >&
      orders() const;

  // int32 total_orders = 2;
  void clear_total_orders();
  int32_t total_orders() const;
  void set_total_orders(int32_t value);
  private:
  int32_t _internal_total_orders() const;
  void _internal_set_total_orders(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mom.OrdersList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderResponse > orders_;
    int32_t total_orders_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Book

// string book_id = 1;
inline void Book::clear_book_id() {
  _impl_.book_id_.ClearToEmpty();
}
inline const std::string& Book::book_id() const {
  // @@protoc_insertion_point(field_get:mom.Book.book_id)
  return _internal_book_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Book::set_book_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.book_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.Book.book_id)
}
inline std::string* Book::mutable_book_id() {
  std::string* _s = _internal_mutable_book_id();
  // @@protoc_insertion_point(field_mutable:mom.Book.book_id)
  return _s;
}
inline const std::string& Book::_internal_book_id() const {
  return _impl_.book_id_.Get();
}
inline void Book::_internal_set_book_id(const std::string& value) {
  
  _impl_.book_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Book::_internal_mutable_book_id() {
  
  return _impl_.book_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Book::release_book_id() {
  // @@protoc_insertion_point(field_release:mom.Book.book_id)
  return _impl_.book_id_.Release();
}
inline void Book::set_allocated_book_id(std::string* book_id) {
  if (book_id != nullptr) {
    
  } else {
    
  }
  _impl_.book_id_.SetAllocated(book_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.book_id_.IsDefault()) {
    _impl_.book_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.Book.book_id)
}

// string title = 2;
inline void Book::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Book::title() const {
  // @@protoc_insertion_point(field_get:mom.Book.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Book::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.Book.title)
}
inline std::string* Book::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:mom.Book.title)
  return _s;
}
inline const std::string& Book::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Book::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Book::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Book::release_title() {
  // @@protoc_insertion_point(field_release:mom.Book.title)
  return _impl_.title_.Release();
}
inline void Book::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.Book.title)
}

// string author = 3;
inline void Book::clear_author() {
  _impl_.author_.ClearToEmpty();
}
inline const std::string& Book::author() const {
  // @@protoc_insertion_point(field_get:mom.Book.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Book::set_author(ArgT0&& arg0, ArgT... args) {
 
 _impl_.author_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.Book.author)
}
inline std::string* Book::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:mom.Book.author)
  return _s;
}
inline const std::string& Book::_internal_author() const {
  return _impl_.author_.Get();
}
inline void Book::_internal_set_author(const std::string& value) {
  
  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* Book::_internal_mutable_author() {
  
  return _impl_.author_.Mutable(GetArenaForAllocation());
}
inline std::string* Book::release_author() {
  // @@protoc_insertion_point(field_release:mom.Book.author)
  return _impl_.author_.Release();
}
inline void Book::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  _impl_.author_.SetAllocated(author, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.Book.author)
}

// string isbn = 4;
inline void Book::clear_isbn() {
  _impl_.isbn_.ClearToEmpty();
}
inline const std::string& Book::isbn() const {
  // @@protoc_insertion_point(field_get:mom.Book.isbn)
  return _internal_isbn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Book::set_isbn(ArgT0&& arg0, ArgT... args) {
 
 _impl_.isbn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.Book.isbn)
}
inline std::string* Book::mutable_isbn() {
  std::string* _s = _internal_mutable_isbn();
  // @@protoc_insertion_point(field_mutable:mom.Book.isbn)
  return _s;
}
inline const std::string& Book::_internal_isbn() const {
  return _impl_.isbn_.Get();
}
inline void Book::_internal_set_isbn(const std::string& value) {
  
  _impl_.isbn_.Set(value, GetArenaForAllocation());
}
inline std::string* Book::_internal_mutable_isbn() {
  
  return _impl_.isbn_.Mutable(GetArenaForAllocation());
}
inline std::string* Book::release_isbn() {
  // @@protoc_insertion_point(field_release:mom.Book.isbn)
  return _impl_.isbn_.Release();
}
inline void Book::set_allocated_isbn(std::string* isbn) {
  if (isbn != nullptr) {
    
  } else {
    
  }
  _impl_.isbn_.SetAllocated(isbn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.isbn_.IsDefault()) {
    _impl_.isbn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.Book.isbn)
}

// int32 stock = 5;
inline void Book::clear_stock() {
  _impl_.stock_ = 0;
}
inline int32_t Book::_internal_stock() const {
  return _impl_.stock_;
}
inline int32_t Book::stock() const {
  // @@protoc_insertion_point(field_get:mom.Book.stock)
  return _internal_stock();
}
inline void Book::_internal_set_stock(int32_t value) {
  
  _impl_.stock_ = value;
}
inline void Book::set_stock(int32_t value) {
  _internal_set_stock(value);
  // @@protoc_insertion_point(field_set:mom.Book.stock)
}

// double price = 6;
inline void Book::clear_price() {
  _impl_.price_ = 0;
}
inline double Book::_internal_price() const {
  return _impl_.price_;
}
inline double Book::price() const {
  // @@protoc_insertion_point(field_get:mom.Book.price)
  return _internal_price();
}
inline void Book::_internal_set_price(double value) {
  
  _impl_.price_ = value;
}
inline void Book::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:mom.Book.price)
}

// -------------------------------------------------------------------

// BookRequest

// string book_id = 1;
inline void BookRequest::clear_book_id() {
  _impl_.book_id_.ClearToEmpty();
}
inline const std::string& BookRequest::book_id() const {
  // @@protoc_insertion_point(field_get:mom.BookRequest.book_id)
  return _internal_book_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookRequest::set_book_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.book_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.BookRequest.book_id)
}
inline std::string* BookRequest::mutable_book_id() {
  std::string* _s = _internal_mutable_book_id();
  // @@protoc_insertion_point(field_mutable:mom.BookRequest.book_id)
  return _s;
}
inline const std::string& BookRequest::_internal_book_id() const {
  return _impl_.book_id_.Get();
}
inline void BookRequest::_internal_set_book_id(const std::string& value) {
  
  _impl_.book_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BookRequest::_internal_mutable_book_id() {
  
  return _impl_.book_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BookRequest::release_book_id() {
  // @@protoc_insertion_point(field_release:mom.BookRequest.book_id)
  return _impl_.book_id_.Release();
}
inline void BookRequest::set_allocated_book_id(std::string* book_id) {
  if (book_id != nullptr) {
    
  } else {
    
  }
  _impl_.book_id_.SetAllocated(book_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.book_id_.IsDefault()) {
    _impl_.book_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.BookRequest.book_id)
}

// -------------------------------------------------------------------

// BookResponse

// string book_id = 1;
inline void BookResponse::clear_book_id() {
  _impl_.book_id_.ClearToEmpty();
}
inline const std::string& BookResponse::book_id() const {
  // @@protoc_insertion_point(field_get:mom.BookResponse.book_id)
  return _internal_book_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookResponse::set_book_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.book_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.BookResponse.book_id)
}
inline std::string* BookResponse::mutable_book_id() {
  std::string* _s = _internal_mutable_book_id();
  // @@protoc_insertion_point(field_mutable:mom.BookResponse.book_id)
  return _s;
}
inline const std::string& BookResponse::_internal_book_id() const {
  return _impl_.book_id_.Get();
}
inline void BookResponse::_internal_set_book_id(const std::string& value) {
  
  _impl_.book_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BookResponse::_internal_mutable_book_id() {
  
  return _impl_.book_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BookResponse::release_book_id() {
  // @@protoc_insertion_point(field_release:mom.BookResponse.book_id)
  return _impl_.book_id_.Release();
}
inline void BookResponse::set_allocated_book_id(std::string* book_id) {
  if (book_id != nullptr) {
    
  } else {
    
  }
  _impl_.book_id_.SetAllocated(book_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.book_id_.IsDefault()) {
    _impl_.book_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.BookResponse.book_id)
}

// string title = 2;
inline void BookResponse::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& BookResponse::title() const {
  // @@protoc_insertion_point(field_get:mom.BookResponse.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookResponse::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.BookResponse.title)
}
inline std::string* BookResponse::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:mom.BookResponse.title)
  return _s;
}
inline const std::string& BookResponse::_internal_title() const {
  return _impl_.title_.Get();
}
inline void BookResponse::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* BookResponse::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* BookResponse::release_title() {
  // @@protoc_insertion_point(field_release:mom.BookResponse.title)
  return _impl_.title_.Release();
}
inline void BookResponse::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.BookResponse.title)
}

// string author = 3;
inline void BookResponse::clear_author() {
  _impl_.author_.ClearToEmpty();
}
inline const std::string& BookResponse::author() const {
  // @@protoc_insertion_point(field_get:mom.BookResponse.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookResponse::set_author(ArgT0&& arg0, ArgT... args) {
 
 _impl_.author_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.BookResponse.author)
}
inline std::string* BookResponse::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:mom.BookResponse.author)
  return _s;
}
inline const std::string& BookResponse::_internal_author() const {
  return _impl_.author_.Get();
}
inline void BookResponse::_internal_set_author(const std::string& value) {
  
  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* BookResponse::_internal_mutable_author() {
  
  return _impl_.author_.Mutable(GetArenaForAllocation());
}
inline std::string* BookResponse::release_author() {
  // @@protoc_insertion_point(field_release:mom.BookResponse.author)
  return _impl_.author_.Release();
}
inline void BookResponse::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  _impl_.author_.SetAllocated(author, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.BookResponse.author)
}

// string isbn = 4;
inline void BookResponse::clear_isbn() {
  _impl_.isbn_.ClearToEmpty();
}
inline const std::string& BookResponse::isbn() const {
  // @@protoc_insertion_point(field_get:mom.BookResponse.isbn)
  return _internal_isbn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookResponse::set_isbn(ArgT0&& arg0, ArgT... args) {
 
 _impl_.isbn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.BookResponse.isbn)
}
inline std::string* BookResponse::mutable_isbn() {
  std::string* _s = _internal_mutable_isbn();
  // @@protoc_insertion_point(field_mutable:mom.BookResponse.isbn)
  return _s;
}
inline const std::string& BookResponse::_internal_isbn() const {
  return _impl_.isbn_.Get();
}
inline void BookResponse::_internal_set_isbn(const std::string& value) {
  
  _impl_.isbn_.Set(value, GetArenaForAllocation());
}
inline std::string* BookResponse::_internal_mutable_isbn() {
  
  return _impl_.isbn_.Mutable(GetArenaForAllocation());
}
inline std::string* BookResponse::release_isbn() {
  // @@protoc_insertion_point(field_release:mom.BookResponse.isbn)
  return _impl_.isbn_.Release();
}
inline void BookResponse::set_allocated_isbn(std::string* isbn) {
  if (isbn != nullptr) {
    
  } else {
    
  }
  _impl_.isbn_.SetAllocated(isbn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.isbn_.IsDefault()) {
    _impl_.isbn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.BookResponse.isbn)
}

// int32 stock = 5;
inline void BookResponse::clear_stock() {
  _impl_.stock_ = 0;
}
inline int32_t BookResponse::_internal_stock() const {
  return _impl_.stock_;
}
inline int32_t BookResponse::stock() const {
  // @@protoc_insertion_point(field_get:mom.BookResponse.stock)
  return _internal_stock();
}
inline void BookResponse::_internal_set_stock(int32_t value) {
  
  _impl_.stock_ = value;
}
inline void BookResponse::set_stock(int32_t value) {
  _internal_set_stock(value);
  // @@protoc_insertion_point(field_set:mom.BookResponse.stock)
}

// double price = 6;
inline void BookResponse::clear_price() {
  _impl_.price_ = 0;
}
inline double BookResponse::_internal_price() const {
  return _impl_.price_;
}
inline double BookResponse::price() const {
  // @@protoc_insertion_point(field_get:mom.BookResponse.price)
  return _internal_price();
}
inline void BookResponse::_internal_set_price(double value) {
  
  _impl_.price_ = value;
}
inline void BookResponse::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:mom.BookResponse.price)
}

// -------------------------------------------------------------------

// SearchRequest

// string query = 1;
inline void SearchRequest::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& SearchRequest::query() const {
  // @@protoc_insertion_point(field_get:mom.SearchRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.SearchRequest.query)
}
inline std::string* SearchRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:mom.SearchRequest.query)
  return _s;
}
inline const std::string& SearchRequest::_internal_query() const {
  return _impl_.query_.Get();
}
inline void SearchRequest::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_query() {
  // @@protoc_insertion_point(field_release:mom.SearchRequest.query)
  return _impl_.query_.Release();
}
inline void SearchRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.SearchRequest.query)
}

// int32 page = 2;
inline void SearchRequest::clear_page() {
  _impl_.page_ = 0;
}
inline int32_t SearchRequest::_internal_page() const {
  return _impl_.page_;
}
inline int32_t SearchRequest::page() const {
  // @@protoc_insertion_point(field_get:mom.SearchRequest.page)
  return _internal_page();
}
inline void SearchRequest::_internal_set_page(int32_t value) {
  
  _impl_.page_ = value;
}
inline void SearchRequest::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:mom.SearchRequest.page)
}

// int32 page_size = 3;
inline void SearchRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t SearchRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t SearchRequest::page_size() const {
  // @@protoc_insertion_point(field_get:mom.SearchRequest.page_size)
  return _internal_page_size();
}
inline void SearchRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void SearchRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:mom.SearchRequest.page_size)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .mom.BookResponse books = 1;
inline int SearchResponse::_internal_books_size() const {
  return _impl_.books_.size();
}
inline int SearchResponse::books_size() const {
  return _internal_books_size();
}
inline void SearchResponse::clear_books() {
  _impl_.books_.Clear();
}
inline ::mom::BookResponse* SearchResponse::mutable_books(int index) {
  // @@protoc_insertion_point(field_mutable:mom.SearchResponse.books)
  return _impl_.books_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::BookResponse >*
SearchResponse::mutable_books() {
  // @@protoc_insertion_point(field_mutable_list:mom.SearchResponse.books)
  return &_impl_.books_;
}
inline const ::mom::BookResponse& SearchResponse::_internal_books(int index) const {
  return _impl_.books_.Get(index);
}
inline const ::mom::BookResponse& SearchResponse::books(int index) const {
  // @@protoc_insertion_point(field_get:mom.SearchResponse.books)
  return _internal_books(index);
}
inline ::mom::BookResponse* SearchResponse::_internal_add_books() {
  return _impl_.books_.Add();
}
inline ::mom::BookResponse* SearchResponse::add_books() {
  ::mom::BookResponse* _add = _internal_add_books();
  // @@protoc_insertion_point(field_add:mom.SearchResponse.books)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::BookResponse >&
SearchResponse::books() const {
  // @@protoc_insertion_point(field_list:mom.SearchResponse.books)
  return _impl_.books_;
}

// int32 total_results = 2;
inline void SearchResponse::clear_total_results() {
  _impl_.total_results_ = 0;
}
inline int32_t SearchResponse::_internal_total_results() const {
  return _impl_.total_results_;
}
inline int32_t SearchResponse::total_results() const {
  // @@protoc_insertion_point(field_get:mom.SearchResponse.total_results)
  return _internal_total_results();
}
inline void SearchResponse::_internal_set_total_results(int32_t value) {
  
  _impl_.total_results_ = value;
}
inline void SearchResponse::set_total_results(int32_t value) {
  _internal_set_total_results(value);
  // @@protoc_insertion_point(field_set:mom.SearchResponse.total_results)
}

// -------------------------------------------------------------------

// UpdateStockRequest

// string book_id = 1;
inline void UpdateStockRequest::clear_book_id() {
  _impl_.book_id_.ClearToEmpty();
}
inline const std::string& UpdateStockRequest::book_id() const {
  // @@protoc_insertion_point(field_get:mom.UpdateStockRequest.book_id)
  return _internal_book_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateStockRequest::set_book_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.book_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UpdateStockRequest.book_id)
}
inline std::string* UpdateStockRequest::mutable_book_id() {
  std::string* _s = _internal_mutable_book_id();
  // @@protoc_insertion_point(field_mutable:mom.UpdateStockRequest.book_id)
  return _s;
}
inline const std::string& UpdateStockRequest::_internal_book_id() const {
  return _impl_.book_id_.Get();
}
inline void UpdateStockRequest::_internal_set_book_id(const std::string& value) {
  
  _impl_.book_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateStockRequest::_internal_mutable_book_id() {
  
  return _impl_.book_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateStockRequest::release_book_id() {
  // @@protoc_insertion_point(field_release:mom.UpdateStockRequest.book_id)
  return _impl_.book_id_.Release();
}
inline void UpdateStockRequest::set_allocated_book_id(std::string* book_id) {
  if (book_id != nullptr) {
    
  } else {
    
  }
  _impl_.book_id_.SetAllocated(book_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.book_id_.IsDefault()) {
    _impl_.book_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UpdateStockRequest.book_id)
}

// int32 quantity_change = 2;
inline void UpdateStockRequest::clear_quantity_change() {
  _impl_.quantity_change_ = 0;
}
inline int32_t UpdateStockRequest::_internal_quantity_change() const {
  return _impl_.quantity_change_;
}
inline int32_t UpdateStockRequest::quantity_change() const {
  // @@protoc_insertion_point(field_get:mom.UpdateStockRequest.quantity_change)
  return _internal_quantity_change();
}
inline void UpdateStockRequest::_internal_set_quantity_change(int32_t value) {
  
  _impl_.quantity_change_ = value;
}
inline void UpdateStockRequest::set_quantity_change(int32_t value) {
  _internal_set_quantity_change(value);
  // @@protoc_insertion_point(field_set:mom.UpdateStockRequest.quantity_change)
}

// -------------------------------------------------------------------

// UpdateStockResponse

// bool success = 1;
inline void UpdateStockResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool UpdateStockResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool UpdateStockResponse::success() const {
  // @@protoc_insertion_point(field_get:mom.UpdateStockResponse.success)
  return _internal_success();
}
inline void UpdateStockResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void UpdateStockResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mom.UpdateStockResponse.success)
}

// int32 new_stock = 2;
inline void UpdateStockResponse::clear_new_stock() {
  _impl_.new_stock_ = 0;
}
inline int32_t UpdateStockResponse::_internal_new_stock() const {
  return _impl_.new_stock_;
}
inline int32_t UpdateStockResponse::new_stock() const {
  // @@protoc_insertion_point(field_get:mom.UpdateStockResponse.new_stock)
  return _internal_new_stock();
}
inline void UpdateStockResponse::_internal_set_new_stock(int32_t value) {
  
  _impl_.new_stock_ = value;
}
inline void UpdateStockResponse::set_new_stock(int32_t value) {
  _internal_set_new_stock(value);
  // @@protoc_insertion_point(field_set:mom.UpdateStockResponse.new_stock)
}

// string message = 3;
inline void UpdateStockResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UpdateStockResponse::message() const {
  // @@protoc_insertion_point(field_get:mom.UpdateStockResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateStockResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UpdateStockResponse.message)
}
inline std::string* UpdateStockResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:mom.UpdateStockResponse.message)
  return _s;
}
inline const std::string& UpdateStockResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void UpdateStockResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateStockResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateStockResponse::release_message() {
  // @@protoc_insertion_point(field_release:mom.UpdateStockResponse.message)
  return _impl_.message_.Release();
}
inline void UpdateStockResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UpdateStockResponse.message)
}

// -------------------------------------------------------------------

// RegisterRequest

// string username = 1;
inline void RegisterRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& RegisterRequest::username() const {
  // @@protoc_insertion_point(field_get:mom.RegisterRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.RegisterRequest.username)
}
inline std::string* RegisterRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:mom.RegisterRequest.username)
  return _s;
}
inline const std::string& RegisterRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void RegisterRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_username() {
  // @@protoc_insertion_point(field_release:mom.RegisterRequest.username)
  return _impl_.username_.Release();
}
inline void RegisterRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.RegisterRequest.username)
}

// string email = 2;
inline void RegisterRequest::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& RegisterRequest::email() const {
  // @@protoc_insertion_point(field_get:mom.RegisterRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.RegisterRequest.email)
}
inline std::string* RegisterRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:mom.RegisterRequest.email)
  return _s;
}
inline const std::string& RegisterRequest::_internal_email() const {
  return _impl_.email_.Get();
}
inline void RegisterRequest::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_email() {
  // @@protoc_insertion_point(field_release:mom.RegisterRequest.email)
  return _impl_.email_.Release();
}
inline void RegisterRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.RegisterRequest.email)
}

// string password = 3;
inline void RegisterRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& RegisterRequest::password() const {
  // @@protoc_insertion_point(field_get:mom.RegisterRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.RegisterRequest.password)
}
inline std::string* RegisterRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:mom.RegisterRequest.password)
  return _s;
}
inline const std::string& RegisterRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void RegisterRequest::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_password() {
  // @@protoc_insertion_point(field_release:mom.RegisterRequest.password)
  return _impl_.password_.Release();
}
inline void RegisterRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.RegisterRequest.password)
}

// string full_name = 4;
inline void RegisterRequest::clear_full_name() {
  _impl_.full_name_.ClearToEmpty();
}
inline const std::string& RegisterRequest::full_name() const {
  // @@protoc_insertion_point(field_get:mom.RegisterRequest.full_name)
  return _internal_full_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_full_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.full_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.RegisterRequest.full_name)
}
inline std::string* RegisterRequest::mutable_full_name() {
  std::string* _s = _internal_mutable_full_name();
  // @@protoc_insertion_point(field_mutable:mom.RegisterRequest.full_name)
  return _s;
}
inline const std::string& RegisterRequest::_internal_full_name() const {
  return _impl_.full_name_.Get();
}
inline void RegisterRequest::_internal_set_full_name(const std::string& value) {
  
  _impl_.full_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_full_name() {
  
  return _impl_.full_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_full_name() {
  // @@protoc_insertion_point(field_release:mom.RegisterRequest.full_name)
  return _impl_.full_name_.Release();
}
inline void RegisterRequest::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  _impl_.full_name_.SetAllocated(full_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.full_name_.IsDefault()) {
    _impl_.full_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.RegisterRequest.full_name)
}

// string address = 5;
inline void RegisterRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& RegisterRequest::address() const {
  // @@protoc_insertion_point(field_get:mom.RegisterRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.RegisterRequest.address)
}
inline std::string* RegisterRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:mom.RegisterRequest.address)
  return _s;
}
inline const std::string& RegisterRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void RegisterRequest::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_address() {
  // @@protoc_insertion_point(field_release:mom.RegisterRequest.address)
  return _impl_.address_.Release();
}
inline void RegisterRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.RegisterRequest.address)
}

// -------------------------------------------------------------------

// GetUserRequest

// string user_id = 1;
inline void GetUserRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:mom.GetUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.GetUserRequest.user_id)
}
inline std::string* GetUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:mom.GetUserRequest.user_id)
  return _s;
}
inline const std::string& GetUserRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetUserRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:mom.GetUserRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.GetUserRequest.user_id)
}

// -------------------------------------------------------------------

// UpdateUserRequest

// string user_id = 1;
inline void UpdateUserRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UpdateUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:mom.UpdateUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UpdateUserRequest.user_id)
}
inline std::string* UpdateUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:mom.UpdateUserRequest.user_id)
  return _s;
}
inline const std::string& UpdateUserRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UpdateUserRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateUserRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:mom.UpdateUserRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void UpdateUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UpdateUserRequest.user_id)
}

// string email = 2;
inline void UpdateUserRequest::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UpdateUserRequest::email() const {
  // @@protoc_insertion_point(field_get:mom.UpdateUserRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateUserRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UpdateUserRequest.email)
}
inline std::string* UpdateUserRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:mom.UpdateUserRequest.email)
  return _s;
}
inline const std::string& UpdateUserRequest::_internal_email() const {
  return _impl_.email_.Get();
}
inline void UpdateUserRequest::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateUserRequest::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateUserRequest::release_email() {
  // @@protoc_insertion_point(field_release:mom.UpdateUserRequest.email)
  return _impl_.email_.Release();
}
inline void UpdateUserRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UpdateUserRequest.email)
}

// string full_name = 3;
inline void UpdateUserRequest::clear_full_name() {
  _impl_.full_name_.ClearToEmpty();
}
inline const std::string& UpdateUserRequest::full_name() const {
  // @@protoc_insertion_point(field_get:mom.UpdateUserRequest.full_name)
  return _internal_full_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateUserRequest::set_full_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.full_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UpdateUserRequest.full_name)
}
inline std::string* UpdateUserRequest::mutable_full_name() {
  std::string* _s = _internal_mutable_full_name();
  // @@protoc_insertion_point(field_mutable:mom.UpdateUserRequest.full_name)
  return _s;
}
inline const std::string& UpdateUserRequest::_internal_full_name() const {
  return _impl_.full_name_.Get();
}
inline void UpdateUserRequest::_internal_set_full_name(const std::string& value) {
  
  _impl_.full_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateUserRequest::_internal_mutable_full_name() {
  
  return _impl_.full_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateUserRequest::release_full_name() {
  // @@protoc_insertion_point(field_release:mom.UpdateUserRequest.full_name)
  return _impl_.full_name_.Release();
}
inline void UpdateUserRequest::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  _impl_.full_name_.SetAllocated(full_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.full_name_.IsDefault()) {
    _impl_.full_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UpdateUserRequest.full_name)
}

// string address = 4;
inline void UpdateUserRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& UpdateUserRequest::address() const {
  // @@protoc_insertion_point(field_get:mom.UpdateUserRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateUserRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UpdateUserRequest.address)
}
inline std::string* UpdateUserRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:mom.UpdateUserRequest.address)
  return _s;
}
inline const std::string& UpdateUserRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void UpdateUserRequest::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateUserRequest::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateUserRequest::release_address() {
  // @@protoc_insertion_point(field_release:mom.UpdateUserRequest.address)
  return _impl_.address_.Release();
}
inline void UpdateUserRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UpdateUserRequest.address)
}

// -------------------------------------------------------------------

// AuthRequest

// string username = 1;
inline void AuthRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& AuthRequest::username() const {
  // @@protoc_insertion_point(field_get:mom.AuthRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.AuthRequest.username)
}
inline std::string* AuthRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:mom.AuthRequest.username)
  return _s;
}
inline const std::string& AuthRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void AuthRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthRequest::release_username() {
  // @@protoc_insertion_point(field_release:mom.AuthRequest.username)
  return _impl_.username_.Release();
}
inline void AuthRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.AuthRequest.username)
}

// string password = 2;
inline void AuthRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& AuthRequest::password() const {
  // @@protoc_insertion_point(field_get:mom.AuthRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.AuthRequest.password)
}
inline std::string* AuthRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:mom.AuthRequest.password)
  return _s;
}
inline const std::string& AuthRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void AuthRequest::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthRequest::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthRequest::release_password() {
  // @@protoc_insertion_point(field_release:mom.AuthRequest.password)
  return _impl_.password_.Release();
}
inline void AuthRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.AuthRequest.password)
}

// -------------------------------------------------------------------

// AuthResponse

// bool success = 1;
inline void AuthResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool AuthResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool AuthResponse::success() const {
  // @@protoc_insertion_point(field_get:mom.AuthResponse.success)
  return _internal_success();
}
inline void AuthResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void AuthResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mom.AuthResponse.success)
}

// string user_id = 2;
inline void AuthResponse::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& AuthResponse::user_id() const {
  // @@protoc_insertion_point(field_get:mom.AuthResponse.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthResponse::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.AuthResponse.user_id)
}
inline std::string* AuthResponse::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:mom.AuthResponse.user_id)
  return _s;
}
inline const std::string& AuthResponse::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void AuthResponse::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthResponse::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:mom.AuthResponse.user_id)
  return _impl_.user_id_.Release();
}
inline void AuthResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.AuthResponse.user_id)
}

// string token = 3;
inline void AuthResponse::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& AuthResponse::token() const {
  // @@protoc_insertion_point(field_get:mom.AuthResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthResponse::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.AuthResponse.token)
}
inline std::string* AuthResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:mom.AuthResponse.token)
  return _s;
}
inline const std::string& AuthResponse::_internal_token() const {
  return _impl_.token_.Get();
}
inline void AuthResponse::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthResponse::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthResponse::release_token() {
  // @@protoc_insertion_point(field_release:mom.AuthResponse.token)
  return _impl_.token_.Release();
}
inline void AuthResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.AuthResponse.token)
}

// string message = 4;
inline void AuthResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& AuthResponse::message() const {
  // @@protoc_insertion_point(field_get:mom.AuthResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.AuthResponse.message)
}
inline std::string* AuthResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:mom.AuthResponse.message)
  return _s;
}
inline const std::string& AuthResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void AuthResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthResponse::release_message() {
  // @@protoc_insertion_point(field_release:mom.AuthResponse.message)
  return _impl_.message_.Release();
}
inline void AuthResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.AuthResponse.message)
}

// -------------------------------------------------------------------

// UserResponse

// string user_id = 1;
inline void UserResponse::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserResponse::user_id() const {
  // @@protoc_insertion_point(field_get:mom.UserResponse.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserResponse::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UserResponse.user_id)
}
inline std::string* UserResponse::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:mom.UserResponse.user_id)
  return _s;
}
inline const std::string& UserResponse::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UserResponse::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResponse::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:mom.UserResponse.user_id)
  return _impl_.user_id_.Release();
}
inline void UserResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UserResponse.user_id)
}

// string username = 2;
inline void UserResponse::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserResponse::username() const {
  // @@protoc_insertion_point(field_get:mom.UserResponse.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserResponse::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UserResponse.username)
}
inline std::string* UserResponse::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:mom.UserResponse.username)
  return _s;
}
inline const std::string& UserResponse::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserResponse::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResponse::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserResponse::release_username() {
  // @@protoc_insertion_point(field_release:mom.UserResponse.username)
  return _impl_.username_.Release();
}
inline void UserResponse::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UserResponse.username)
}

// string email = 3;
inline void UserResponse::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserResponse::email() const {
  // @@protoc_insertion_point(field_get:mom.UserResponse.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserResponse::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UserResponse.email)
}
inline std::string* UserResponse::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:mom.UserResponse.email)
  return _s;
}
inline const std::string& UserResponse::_internal_email() const {
  return _impl_.email_.Get();
}
inline void UserResponse::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResponse::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* UserResponse::release_email() {
  // @@protoc_insertion_point(field_release:mom.UserResponse.email)
  return _impl_.email_.Release();
}
inline void UserResponse::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UserResponse.email)
}

// string full_name = 4;
inline void UserResponse::clear_full_name() {
  _impl_.full_name_.ClearToEmpty();
}
inline const std::string& UserResponse::full_name() const {
  // @@protoc_insertion_point(field_get:mom.UserResponse.full_name)
  return _internal_full_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserResponse::set_full_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.full_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UserResponse.full_name)
}
inline std::string* UserResponse::mutable_full_name() {
  std::string* _s = _internal_mutable_full_name();
  // @@protoc_insertion_point(field_mutable:mom.UserResponse.full_name)
  return _s;
}
inline const std::string& UserResponse::_internal_full_name() const {
  return _impl_.full_name_.Get();
}
inline void UserResponse::_internal_set_full_name(const std::string& value) {
  
  _impl_.full_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResponse::_internal_mutable_full_name() {
  
  return _impl_.full_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserResponse::release_full_name() {
  // @@protoc_insertion_point(field_release:mom.UserResponse.full_name)
  return _impl_.full_name_.Release();
}
inline void UserResponse::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  _impl_.full_name_.SetAllocated(full_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.full_name_.IsDefault()) {
    _impl_.full_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UserResponse.full_name)
}

// string address = 5;
inline void UserResponse::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& UserResponse::address() const {
  // @@protoc_insertion_point(field_get:mom.UserResponse.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserResponse::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UserResponse.address)
}
inline std::string* UserResponse::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:mom.UserResponse.address)
  return _s;
}
inline const std::string& UserResponse::_internal_address() const {
  return _impl_.address_.Get();
}
inline void UserResponse::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResponse::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* UserResponse::release_address() {
  // @@protoc_insertion_point(field_release:mom.UserResponse.address)
  return _impl_.address_.Release();
}
inline void UserResponse::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UserResponse.address)
}

// string created_at = 6;
inline void UserResponse::clear_created_at() {
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& UserResponse::created_at() const {
  // @@protoc_insertion_point(field_get:mom.UserResponse.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserResponse::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 _impl_.created_at_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UserResponse.created_at)
}
inline std::string* UserResponse::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:mom.UserResponse.created_at)
  return _s;
}
inline const std::string& UserResponse::_internal_created_at() const {
  return _impl_.created_at_.Get();
}
inline void UserResponse::_internal_set_created_at(const std::string& value) {
  
  _impl_.created_at_.Set(value, GetArenaForAllocation());
}
inline std::string* UserResponse::_internal_mutable_created_at() {
  
  return _impl_.created_at_.Mutable(GetArenaForAllocation());
}
inline std::string* UserResponse::release_created_at() {
  // @@protoc_insertion_point(field_release:mom.UserResponse.created_at)
  return _impl_.created_at_.Release();
}
inline void UserResponse::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  _impl_.created_at_.SetAllocated(created_at, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UserResponse.created_at)
}

// -------------------------------------------------------------------

// OrderItem

// string book_id = 1;
inline void OrderItem::clear_book_id() {
  _impl_.book_id_.ClearToEmpty();
}
inline const std::string& OrderItem::book_id() const {
  // @@protoc_insertion_point(field_get:mom.OrderItem.book_id)
  return _internal_book_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderItem::set_book_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.book_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.OrderItem.book_id)
}
inline std::string* OrderItem::mutable_book_id() {
  std::string* _s = _internal_mutable_book_id();
  // @@protoc_insertion_point(field_mutable:mom.OrderItem.book_id)
  return _s;
}
inline const std::string& OrderItem::_internal_book_id() const {
  return _impl_.book_id_.Get();
}
inline void OrderItem::_internal_set_book_id(const std::string& value) {
  
  _impl_.book_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderItem::_internal_mutable_book_id() {
  
  return _impl_.book_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderItem::release_book_id() {
  // @@protoc_insertion_point(field_release:mom.OrderItem.book_id)
  return _impl_.book_id_.Release();
}
inline void OrderItem::set_allocated_book_id(std::string* book_id) {
  if (book_id != nullptr) {
    
  } else {
    
  }
  _impl_.book_id_.SetAllocated(book_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.book_id_.IsDefault()) {
    _impl_.book_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.OrderItem.book_id)
}

// int32 quantity = 2;
inline void OrderItem::clear_quantity() {
  _impl_.quantity_ = 0;
}
inline int32_t OrderItem::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int32_t OrderItem::quantity() const {
  // @@protoc_insertion_point(field_get:mom.OrderItem.quantity)
  return _internal_quantity();
}
inline void OrderItem::_internal_set_quantity(int32_t value) {
  
  _impl_.quantity_ = value;
}
inline void OrderItem::set_quantity(int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:mom.OrderItem.quantity)
}

// double unit_price = 3;
inline void OrderItem::clear_unit_price() {
  _impl_.unit_price_ = 0;
}
inline double OrderItem::_internal_unit_price() const {
  return _impl_.unit_price_;
}
inline double OrderItem::unit_price() const {
  // @@protoc_insertion_point(field_get:mom.OrderItem.unit_price)
  return _internal_unit_price();
}
inline void OrderItem::_internal_set_unit_price(double value) {
  
  _impl_.unit_price_ = value;
}
inline void OrderItem::set_unit_price(double value) {
  _internal_set_unit_price(value);
  // @@protoc_insertion_point(field_set:mom.OrderItem.unit_price)
}

// -------------------------------------------------------------------

// CreateOrderRequest

// string user_id = 1;
inline void CreateOrderRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& CreateOrderRequest::user_id() const {
  // @@protoc_insertion_point(field_get:mom.CreateOrderRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrderRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.CreateOrderRequest.user_id)
}
inline std::string* CreateOrderRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:mom.CreateOrderRequest.user_id)
  return _s;
}
inline const std::string& CreateOrderRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void CreateOrderRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateOrderRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateOrderRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:mom.CreateOrderRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void CreateOrderRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.CreateOrderRequest.user_id)
}

// repeated .mom.OrderItem items = 2;
inline int CreateOrderRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CreateOrderRequest::items_size() const {
  return _internal_items_size();
}
inline void CreateOrderRequest::clear_items() {
  _impl_.items_.Clear();
}
inline ::mom::OrderItem* CreateOrderRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:mom.CreateOrderRequest.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderItem >*
CreateOrderRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:mom.CreateOrderRequest.items)
  return &_impl_.items_;
}
inline const ::mom::OrderItem& CreateOrderRequest::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::mom::OrderItem& CreateOrderRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:mom.CreateOrderRequest.items)
  return _internal_items(index);
}
inline ::mom::OrderItem* CreateOrderRequest::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::mom::OrderItem* CreateOrderRequest::add_items() {
  ::mom::OrderItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:mom.CreateOrderRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderItem >&
CreateOrderRequest::items() const {
  // @@protoc_insertion_point(field_list:mom.CreateOrderRequest.items)
  return _impl_.items_;
}

// string shipping_address = 3;
inline void CreateOrderRequest::clear_shipping_address() {
  _impl_.shipping_address_.ClearToEmpty();
}
inline const std::string& CreateOrderRequest::shipping_address() const {
  // @@protoc_insertion_point(field_get:mom.CreateOrderRequest.shipping_address)
  return _internal_shipping_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOrderRequest::set_shipping_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.shipping_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.CreateOrderRequest.shipping_address)
}
inline std::string* CreateOrderRequest::mutable_shipping_address() {
  std::string* _s = _internal_mutable_shipping_address();
  // @@protoc_insertion_point(field_mutable:mom.CreateOrderRequest.shipping_address)
  return _s;
}
inline const std::string& CreateOrderRequest::_internal_shipping_address() const {
  return _impl_.shipping_address_.Get();
}
inline void CreateOrderRequest::_internal_set_shipping_address(const std::string& value) {
  
  _impl_.shipping_address_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateOrderRequest::_internal_mutable_shipping_address() {
  
  return _impl_.shipping_address_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateOrderRequest::release_shipping_address() {
  // @@protoc_insertion_point(field_release:mom.CreateOrderRequest.shipping_address)
  return _impl_.shipping_address_.Release();
}
inline void CreateOrderRequest::set_allocated_shipping_address(std::string* shipping_address) {
  if (shipping_address != nullptr) {
    
  } else {
    
  }
  _impl_.shipping_address_.SetAllocated(shipping_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shipping_address_.IsDefault()) {
    _impl_.shipping_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.CreateOrderRequest.shipping_address)
}

// -------------------------------------------------------------------

// GetOrderRequest

// string order_id = 1;
inline void GetOrderRequest::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& GetOrderRequest::order_id() const {
  // @@protoc_insertion_point(field_get:mom.GetOrderRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrderRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.GetOrderRequest.order_id)
}
inline std::string* GetOrderRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:mom.GetOrderRequest.order_id)
  return _s;
}
inline const std::string& GetOrderRequest::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void GetOrderRequest::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOrderRequest::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOrderRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:mom.GetOrderRequest.order_id)
  return _impl_.order_id_.Release();
}
inline void GetOrderRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.GetOrderRequest.order_id)
}

// -------------------------------------------------------------------

// ListOrdersRequest

// string user_id = 1;
inline void ListOrdersRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& ListOrdersRequest::user_id() const {
  // @@protoc_insertion_point(field_get:mom.ListOrdersRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListOrdersRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.ListOrdersRequest.user_id)
}
inline std::string* ListOrdersRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:mom.ListOrdersRequest.user_id)
  return _s;
}
inline const std::string& ListOrdersRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void ListOrdersRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListOrdersRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ListOrdersRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:mom.ListOrdersRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void ListOrdersRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.ListOrdersRequest.user_id)
}

// int32 page = 2;
inline void ListOrdersRequest::clear_page() {
  _impl_.page_ = 0;
}
inline int32_t ListOrdersRequest::_internal_page() const {
  return _impl_.page_;
}
inline int32_t ListOrdersRequest::page() const {
  // @@protoc_insertion_point(field_get:mom.ListOrdersRequest.page)
  return _internal_page();
}
inline void ListOrdersRequest::_internal_set_page(int32_t value) {
  
  _impl_.page_ = value;
}
inline void ListOrdersRequest::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:mom.ListOrdersRequest.page)
}

// int32 page_size = 3;
inline void ListOrdersRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline int32_t ListOrdersRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int32_t ListOrdersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:mom.ListOrdersRequest.page_size)
  return _internal_page_size();
}
inline void ListOrdersRequest::_internal_set_page_size(int32_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListOrdersRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:mom.ListOrdersRequest.page_size)
}

// -------------------------------------------------------------------

// OrderResponse

// string order_id = 1;
inline void OrderResponse::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& OrderResponse::order_id() const {
  // @@protoc_insertion_point(field_get:mom.OrderResponse.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.OrderResponse.order_id)
}
inline std::string* OrderResponse::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:mom.OrderResponse.order_id)
  return _s;
}
inline const std::string& OrderResponse::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void OrderResponse::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderResponse::release_order_id() {
  // @@protoc_insertion_point(field_release:mom.OrderResponse.order_id)
  return _impl_.order_id_.Release();
}
inline void OrderResponse::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.OrderResponse.order_id)
}

// string user_id = 2;
inline void OrderResponse::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& OrderResponse::user_id() const {
  // @@protoc_insertion_point(field_get:mom.OrderResponse.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.OrderResponse.user_id)
}
inline std::string* OrderResponse::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:mom.OrderResponse.user_id)
  return _s;
}
inline const std::string& OrderResponse::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void OrderResponse::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:mom.OrderResponse.user_id)
  return _impl_.user_id_.Release();
}
inline void OrderResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.OrderResponse.user_id)
}

// repeated .mom.OrderItem items = 3;
inline int OrderResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int OrderResponse::items_size() const {
  return _internal_items_size();
}
inline void OrderResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::mom::OrderItem* OrderResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:mom.OrderResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderItem >*
OrderResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:mom.OrderResponse.items)
  return &_impl_.items_;
}
inline const ::mom::OrderItem& OrderResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::mom::OrderItem& OrderResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:mom.OrderResponse.items)
  return _internal_items(index);
}
inline ::mom::OrderItem* OrderResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::mom::OrderItem* OrderResponse::add_items() {
  ::mom::OrderItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:mom.OrderResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderItem >&
OrderResponse::items() const {
  // @@protoc_insertion_point(field_list:mom.OrderResponse.items)
  return _impl_.items_;
}

// double total_amount = 4;
inline void OrderResponse::clear_total_amount() {
  _impl_.total_amount_ = 0;
}
inline double OrderResponse::_internal_total_amount() const {
  return _impl_.total_amount_;
}
inline double OrderResponse::total_amount() const {
  // @@protoc_insertion_point(field_get:mom.OrderResponse.total_amount)
  return _internal_total_amount();
}
inline void OrderResponse::_internal_set_total_amount(double value) {
  
  _impl_.total_amount_ = value;
}
inline void OrderResponse::set_total_amount(double value) {
  _internal_set_total_amount(value);
  // @@protoc_insertion_point(field_set:mom.OrderResponse.total_amount)
}

// string shipping_address = 5;
inline void OrderResponse::clear_shipping_address() {
  _impl_.shipping_address_.ClearToEmpty();
}
inline const std::string& OrderResponse::shipping_address() const {
  // @@protoc_insertion_point(field_get:mom.OrderResponse.shipping_address)
  return _internal_shipping_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_shipping_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.shipping_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.OrderResponse.shipping_address)
}
inline std::string* OrderResponse::mutable_shipping_address() {
  std::string* _s = _internal_mutable_shipping_address();
  // @@protoc_insertion_point(field_mutable:mom.OrderResponse.shipping_address)
  return _s;
}
inline const std::string& OrderResponse::_internal_shipping_address() const {
  return _impl_.shipping_address_.Get();
}
inline void OrderResponse::_internal_set_shipping_address(const std::string& value) {
  
  _impl_.shipping_address_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_shipping_address() {
  
  return _impl_.shipping_address_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderResponse::release_shipping_address() {
  // @@protoc_insertion_point(field_release:mom.OrderResponse.shipping_address)
  return _impl_.shipping_address_.Release();
}
inline void OrderResponse::set_allocated_shipping_address(std::string* shipping_address) {
  if (shipping_address != nullptr) {
    
  } else {
    
  }
  _impl_.shipping_address_.SetAllocated(shipping_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shipping_address_.IsDefault()) {
    _impl_.shipping_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.OrderResponse.shipping_address)
}

// string status = 6;
inline void OrderResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& OrderResponse::status() const {
  // @@protoc_insertion_point(field_get:mom.OrderResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.OrderResponse.status)
}
inline std::string* OrderResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:mom.OrderResponse.status)
  return _s;
}
inline const std::string& OrderResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void OrderResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderResponse::release_status() {
  // @@protoc_insertion_point(field_release:mom.OrderResponse.status)
  return _impl_.status_.Release();
}
inline void OrderResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.OrderResponse.status)
}

// string created_at = 7;
inline void OrderResponse::clear_created_at() {
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& OrderResponse::created_at() const {
  // @@protoc_insertion_point(field_get:mom.OrderResponse.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderResponse::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 _impl_.created_at_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.OrderResponse.created_at)
}
inline std::string* OrderResponse::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:mom.OrderResponse.created_at)
  return _s;
}
inline const std::string& OrderResponse::_internal_created_at() const {
  return _impl_.created_at_.Get();
}
inline void OrderResponse::_internal_set_created_at(const std::string& value) {
  
  _impl_.created_at_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderResponse::_internal_mutable_created_at() {
  
  return _impl_.created_at_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderResponse::release_created_at() {
  // @@protoc_insertion_point(field_release:mom.OrderResponse.created_at)
  return _impl_.created_at_.Release();
}
inline void OrderResponse::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  _impl_.created_at_.SetAllocated(created_at, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.OrderResponse.created_at)
}

// -------------------------------------------------------------------

// ListOrdersResponse

// repeated .mom.OrderResponse orders = 1;
inline int ListOrdersResponse::_internal_orders_size() const {
  return _impl_.orders_.size();
}
inline int ListOrdersResponse::orders_size() const {
  return _internal_orders_size();
}
inline void ListOrdersResponse::clear_orders() {
  _impl_.orders_.Clear();
}
inline ::mom::OrderResponse* ListOrdersResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:mom.ListOrdersResponse.orders)
  return _impl_.orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderResponse >*
ListOrdersResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:mom.ListOrdersResponse.orders)
  return &_impl_.orders_;
}
inline const ::mom::OrderResponse& ListOrdersResponse::_internal_orders(int index) const {
  return _impl_.orders_.Get(index);
}
inline const ::mom::OrderResponse& ListOrdersResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:mom.ListOrdersResponse.orders)
  return _internal_orders(index);
}
inline ::mom::OrderResponse* ListOrdersResponse::_internal_add_orders() {
  return _impl_.orders_.Add();
}
inline ::mom::OrderResponse* ListOrdersResponse::add_orders() {
  ::mom::OrderResponse* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:mom.ListOrdersResponse.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderResponse >&
ListOrdersResponse::orders() const {
  // @@protoc_insertion_point(field_list:mom.ListOrdersResponse.orders)
  return _impl_.orders_;
}

// int32 total_orders = 2;
inline void ListOrdersResponse::clear_total_orders() {
  _impl_.total_orders_ = 0;
}
inline int32_t ListOrdersResponse::_internal_total_orders() const {
  return _impl_.total_orders_;
}
inline int32_t ListOrdersResponse::total_orders() const {
  // @@protoc_insertion_point(field_get:mom.ListOrdersResponse.total_orders)
  return _internal_total_orders();
}
inline void ListOrdersResponse::_internal_set_total_orders(int32_t value) {
  
  _impl_.total_orders_ = value;
}
inline void ListOrdersResponse::set_total_orders(int32_t value) {
  _internal_set_total_orders(value);
  // @@protoc_insertion_point(field_set:mom.ListOrdersResponse.total_orders)
}

// -------------------------------------------------------------------

// UserIdRequest

// string user_id = 1;
inline void UserIdRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserIdRequest::user_id() const {
  // @@protoc_insertion_point(field_get:mom.UserIdRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserIdRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.UserIdRequest.user_id)
}
inline std::string* UserIdRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:mom.UserIdRequest.user_id)
  return _s;
}
inline const std::string& UserIdRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UserIdRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserIdRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserIdRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:mom.UserIdRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void UserIdRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.UserIdRequest.user_id)
}

// -------------------------------------------------------------------

// OrderIdRequest

// string order_id = 1;
inline void OrderIdRequest::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& OrderIdRequest::order_id() const {
  // @@protoc_insertion_point(field_get:mom.OrderIdRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderIdRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mom.OrderIdRequest.order_id)
}
inline std::string* OrderIdRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:mom.OrderIdRequest.order_id)
  return _s;
}
inline const std::string& OrderIdRequest::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void OrderIdRequest::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderIdRequest::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OrderIdRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:mom.OrderIdRequest.order_id)
  return _impl_.order_id_.Release();
}
inline void OrderIdRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mom.OrderIdRequest.order_id)
}

// -------------------------------------------------------------------

// OrdersList

// repeated .mom.OrderResponse orders = 1;
inline int OrdersList::_internal_orders_size() const {
  return _impl_.orders_.size();
}
inline int OrdersList::orders_size() const {
  return _internal_orders_size();
}
inline void OrdersList::clear_orders() {
  _impl_.orders_.Clear();
}
inline ::mom::OrderResponse* OrdersList::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:mom.OrdersList.orders)
  return _impl_.orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderResponse >*
OrdersList::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:mom.OrdersList.orders)
  return &_impl_.orders_;
}
inline const ::mom::OrderResponse& OrdersList::_internal_orders(int index) const {
  return _impl_.orders_.Get(index);
}
inline const ::mom::OrderResponse& OrdersList::orders(int index) const {
  // @@protoc_insertion_point(field_get:mom.OrdersList.orders)
  return _internal_orders(index);
}
inline ::mom::OrderResponse* OrdersList::_internal_add_orders() {
  return _impl_.orders_.Add();
}
inline ::mom::OrderResponse* OrdersList::add_orders() {
  ::mom::OrderResponse* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:mom.OrdersList.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mom::OrderResponse >&
OrdersList::orders() const {
  // @@protoc_insertion_point(field_list:mom.OrdersList.orders)
  return _impl_.orders_;
}

// int32 total_orders = 2;
inline void OrdersList::clear_total_orders() {
  _impl_.total_orders_ = 0;
}
inline int32_t OrdersList::_internal_total_orders() const {
  return _impl_.total_orders_;
}
inline int32_t OrdersList::total_orders() const {
  // @@protoc_insertion_point(field_get:mom.OrdersList.total_orders)
  return _internal_total_orders();
}
inline void OrdersList::_internal_set_total_orders(int32_t value) {
  
  _impl_.total_orders_ = value;
}
inline void OrdersList::set_total_orders(int32_t value) {
  _internal_set_total_orders(value);
  // @@protoc_insertion_point(field_set:mom.OrdersList.total_orders)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mom

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mom_2eproto
